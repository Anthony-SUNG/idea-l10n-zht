
go.onboarding.module.name=入門導覽
go.onboarding.module.description={0} 中的主要功能概覽
go.onboarding.lesson.name=熟悉 {0}
go.onboarding.project.view.description=<strong>項目</strong>視圖是主要工具窗口之一。它包含項目目錄、SDK 特定的軟件包和臨時文件。使用帶條紋的按鈕可以將其打開，您會看到一個簡單的演示項目。也可以按 {0} 打開。
go.onboarding.balloon.project.view=點擊以打開<strong>項目</strong>視圖
go.onboarding.balloon.project.directory=雙擊項目目錄可以將其展開並查看項目文件
go.onboarding.balloon.open.file=雙擊以打開 {0}
go.onboarding.balloon.open.learn.toolbar=切換到“{0}”工具窗口繼續學習本課
go.onboarding.context.menu=您可以通過不同的方式運行代碼。其中的一種方式是利用上下文菜單。\n\
嘗試通過右鍵點擊代碼所在編輯器中的區域調用上下文菜單。
go.onboarding.run.sample=選擇 {0} 或嘗試 {1}。
go.onboarding.temporary.configuration.description=<ide/> 剛剛創建了一個臨時運行配置。您可以在“運行”工具欄中找到此配置。使用此工具欄，您可以為所選配置執行常用的運行操作，例如運行 {0}、調試 {1}、分析代碼 {2} 以及運行代碼覆蓋率 {3}。
go.onboarding.balloon.click.here=點擊此處設置斷點
go.onboarding.toggle.breakpoint.1=您可能會注意到 {1} 方法沒有返回預期值 {0}，而是返回 {2}。我們來查看 return 語句，調試有問題的代碼。
go.onboarding.toggle.breakpoint.2=點擊高亮顯示區域中的間距以設置斷點。
go.onboarding.balloon.start.debugging=點擊該圖標以開始調試
go.onboarding.start.debugging=點擊 {0} 圖標啟動調試過程。
go.onboarding.balloon.about.debug.panel={0} 工具窗口能夠為 {1,choice,0#工具欄|1#工具欄} 提供各種調試操作。您可以稍后在 {2} 課程中進行嘗試。
go.onboarding.balloon.stop.debugging=點擊該圖標以停止調試
go.onboarding.stop.debugging=我們來停止調試。點擊 {0} 圖標。
go.onboarding.type.division=发現代碼中的問題后，我們來進行修正。將得到的和除以值的長度。鍵入 {0}。
go.onboarding.choose.len.item=<ide/> 會在您鍵入時自動顯示補全選項。使用鍵盤上的箭頭選擇 {0} 條目，然后按 {1}。
go.onboarding.invoke.completion=現在調用代碼補全，在括號 {1} 中插入 {0}。按 {2} 打開補全列表。
go.onboarding.choose.values.item=您可以鍵入 {0} 來減少建議的條目數。選擇 {1} 並按 {2}。
go.onboarding.invoke.intention.for.warning.1=您剛剛修正了一個錯誤，但還可以進一步改進這段代碼。<ide/> 將高亮顯示可以改進的代碼行，並為這些行添加黃色燈泡。
go.onboarding.invoke.intention.for.warning.2=按 {0} 預覽警告並應用快速修復。
go.onboarding.select.fix=應用第一個條目: {0}。通過該修正消除了不必要的圓括號。
go.onboarding.invoke.intention.for.code=意圖還可以節省您的時間，讓編碼更輕松。我們使用意圖將 {0} 函數快速轉換為導出函數。按 {1}。
go.onboarding.apply.intention=選擇 {0} 並按 {1}。
go.onboarding.invoke.search.everywhere.1=在 <ide/> 中進行處理時，您可能想要搜索項目中的文件、符號、類型乃至 IDE 操作。在本課中，我們將搜索 {0} 操作，以將 {1} 字符串改為小寫。
go.onboarding.invoke.search.everywhere.2=按兩次 {0} 以打開“{1}”對話框。
go.onboarding.search.everywhere.description=可以看到，所選文本 {0} 已被自動復制到輸入字符串中。我們不鍵入 {0}，而是鍵入 {1}。
go.onboarding.apply.action=選擇“{0}”操作，然后按 {1}。
go.onboarding.case.changed=大小寫已更改。
go.onboarding.epilog=恭喜! 您已完成入門導覽。此時，您可以:\n\
  - <callback id="{0}">關閉</callback>學習項目{1}\n\
  - <callback id="{2}">顯示</callback>更多教程
go.onboarding.return.to.welcome=\ 並返回歡迎屏幕
go.onboarding.finish.title=恭喜
go.onboarding.finish.text=您剛剛完成了 <ide/> 入門導覽。\n\
現在可以關閉學習項目{0}。\n\
您也可以繼續學習，嘗試其他課程。
go.onboarding.finish.exit=關閉演示項目
go.onboarding.finish.modules=顯示更多課目
toggle.case.part=大小寫
go.onboarding.close.debug.tool.window=要關閉{0}工具窗口，請按 {1}。
go.what.s.new.module.name=GoLand 2021.3 中的最新變化
go.what.s.new.module.description=GoLand 2021.3 的新功能（2021 年 11 月）
go.wrapping.lesson.name=換行並刪除代碼行
go.wrapping.delete.line=警告指出，我們嘗試將兩個 struct 字段（{0} 和 {1}）映射到相同的 JSON 字段名稱，此做法並不好。遇到此錯誤，程序仍能運行，但將在輸出中遺漏一個鍵。\n\
要解決此問題，您可以重命名標記字符串中的值或刪除整個字符串。簡單起見，我們按 {2} 移除整個字符串。
go.basic.editing.module.name=代碼編輯
go.basic.editing.module.description=能夠幫助您編輯代碼的操作
go.code.completion.module.description=上下文感知的代碼補全可加快編碼過程並減少拼寫錯誤
go.debugging.module.description=調試可以幫助您发現並解決應用程序中的問題
go.testing.module.description=測試可確保代碼的行為正確無誤且符合預期
go.generating.code.module.description=生成代碼塊的操作和模板
go.intention.actions.module.description=意圖操作可以為您提供代碼的替代變體，甚至為檢測到的問題提供解決方案
go.refactorings.module.description=重構可使您的代碼可靠、簡潔並易于維護
go.error.handling.module.name=錯誤處理
go.error.handling.module.description=了解如何在 Go 中加快錯誤處理速度
go.advanced.module.name=高級
go.advanced.module.description=需要對該語言有更深理解的功能
go.navigation.module.name=導航
go.navigation.module.description=在代碼庫中進行移動
go.code.style.module.name=代碼樣式
go.code.style.module.description=在您的源代碼中應用 Go 編碼慣例
go.search.module.name=搜索
go.search.module.description=了解 IDE 的搜索功能
go.smart.type.completion.and.pointers.lesson.name=智能類型補全：指針
go.postfix.completion.lesson.name=后綴補全
go.postfix.completion.intro=使用后綴模板，您可以根據點號、表達式類型及其上下文后的后綴，將已經輸入的表達式轉換為其他表達式。您可以使用一組預定義的后綴補全模板或創建新模板。有關自定義后綴模板的更多信息，請參閱<a href = "{0}">此文檔文章</a>。
go.postfix.completion.better.variable.names.in.templates.description=<ide/> 可以幫助您對使用 {0} 和 {1} 后綴模板生成的變量進行命名。例如，在以下建議中，您可以會遇到：用于索引的 {2} 或 {3}，或者用于 {5} 的 {4} 。
go.postfix.completion.better.variable.names.in.templates.use.forr=鍵入 {0}，然后從補全列表中選擇 {1} 后綴模板。
go.struct.inspections.lesson.name=struct 檢查
go.struct.inspections.jump.to.warning=Go 按慣例會對 struct 標記編程。您可以閱讀 <a href="{0}">pkg.go.dev 的文章</a>了解更多有關這些慣例的信息。\n\
IDE 已經了解這些慣例，並且將幫助您查找違反 Go 慣例的不一致部分。找到的所有問題都會高亮顯示。例如，{1} 字段周圍的高亮顯示。\n\
來導航到該錯誤，看看有什么問題吧。要跳轉到警告，請按 {2}。
go.struct.inspections.delete.line=警告指出，我們嘗試將兩個 struct 字段（{0} 和 {1}）映射到相同的 JSON 字段名稱，此做法並不好。遇到此錯誤，程序仍能運行，但將在輸出中遺漏一個鍵。\n\
要解決此問題，您可以重命名標記字符串中的值或刪除整個字符串。簡單起見，我們按 {2} 移除整個字符串。
go.inspection.unsafe.context.cancellation.name=不安全的上下文取消
go.inspection.unsafe.context.cancellation.go.to.error=您可以在 <ide/> 于代碼分析期間发現的問題之間導航。\n\
示例中包含一個問題。按 {0} 查看此問題。
go.inspection.unsafe.context.cancellation.add.defer={0} 代碼檢查會檢查是否在所有執行路徑上調用了 {2} 返回的 {1} 函數和類似函數。\n\
由于我們不在 {4} 執行路徑上調用 {3}，因此您需要鍵入 {5} 來修復警告。
go.formatting.lesson.name=內置格式化程序
go.formatting.reformat.selection=<ide/> 可以幫助您進行代碼格式化。點擊 {0} 重新格式化所選代碼塊。
go.formatting.clear.selection=要清理選擇，按 {0}。
go.formatting.whole.file=要重新格式化整個源文件，請在未選擇任何行的情況下使用 {0}。
go.fmt.lesson.name=運行 go fmt
go.fmt.task=如果您傾向于使用 {0} 格式化代碼，可以按 {1} 運行。
go.general.templates.lesson.name=實時模板：fori 和 vars
go.general.templates.intro=實時模板可在代碼中插入常見結構，如循環、條件、各種聲明或打印語句。
go.general.templates.fori=我們從循環開始。輸入{0} 並從建議列表中選擇 {0}。在循環中設置以下條件：{1}。
go.general.templates.type.iteration=每次迭代，{0} 循環必須執行 {1}。
go.live.templates.with.types.lesson.name=實時模板：創建類型和接口
go.handling.errors.with.templates.lesson.name=實時和后綴模板：if 和 rr
go.handling.errors.with.templates.if.not.null=部分函數返回兩個值。例如，{0} 返回指向 {1} 的指針和錯誤值。如果錯誤值為 {2}，則文件成功打開。如果錯誤不是 {3}，則說明发生了錯誤。在 <ide/> 中，實時和后綴模板可以幫助您更快速地編寫錯誤值的處理進程。\n\
鍵入 {4}，然后從補全列表選擇 {5} 實時模板。
go.handling.errors.with.templates.return.nil.err=如果打開文件時出錯，則需要返回一個切片和一個錯誤。我們可以返回 {0} 和 {1}。開始鍵入 {2}，選擇 {3} 實時模板。
go.handling.errors.with.templates.error.case=后綴代碼補全可幫助您減少編寫代碼時的后向文本光標跳轉。使用這些模板，可以將已經鍵入的表達式轉換為另一種表達式。您可以在 {0} 部分中找到有關后綴補全的更多課程。\n\
掃描文件時，{1} 可能會遇到錯誤。如果发生錯誤，在掃描儀上調用 {2} 方法將返回該錯誤。\n\
要處理從 {2} 方法返回的可能錯誤，只需鍵入 {3} 並按 {4} 應用后綴模板。
go.quick.fix.refactorings.lesson.name=重命名、創建變量並將 Println 改為 Printf
go.working.with.parameters.lesson.name=使用形參
go.working.with.parameters.single.type=如果函數或方法簽名中具有單個類型的多個參數，則可以為這些參數使用簡短的類型規范({0})，也可以為每個參數使用單獨的類型規范({1})。
go.working.with.parameters.invoke.intentions.1=文本光標位于 {0} 方法的第一個參數處。按 {1} 調用意圖操作。
go.working.with.parameters.signature.combined=注意簽名類型是如何組合的。
go.working.with.parameters.press.action.again=現在再按一下 {0}。
go.working.with.parameters.signature.expanded=要將簽名恢復到初始狀態，請選擇 {0}。
go.working.with.parameters.that.are.not.used=<ide/> 可以檢測簽名中未用于方法或函數體的參數。只要它們不被使用，就可以通過 {0} 快速修復將其刪除。
go.working.with.parameters.invoke.intentions.2=注意編輯器中的 {0} 方法。文本光標位于第一個參數處。按 {1} 調用意圖操作。
go.working.with.parameters.remove.parameters=<ide/> 僅高亮顯示未使用形參的名稱，前提是其類型用于實現方法規范。在這種情況下，您可以將此形參重命名為 {0} 或完全移除其名稱。
go.working.with.parameters.invoke.intentions.3=如果方法要實現接口時需要形參，那么移除將產生不安全的結果。按 {0} 查看可能選項的列表。
go.extract.methods.with.returns.lesson.name=提取方法
go.extract.inline.variables.lesson.name=提取和內聯變量
go.extract.inline.variables.extract.task=按 {0} 提取變量，選擇一個字符串表達式，輸入新名稱，然后按 {1} 完成重構。
go.extract.inline.variables.inline.task=與 {0} 重構相反，{1} 有助于移除冗余變量。按 {2} 可將變量內聯到其單個用法中。
go.working.with.json.name=使用 JSON
go.working.with.json.copy=<ide/> 有几種工具可以幫助您更有效地處理 JSON 代碼。\n\
按 {0} 復制所選的 JSON。
go.working.with.json.replace=按 {0} 替換注釋部分。出現“{1}” 對話框時，請點擊<strong>是</strong>。\n\
<ide/> 自動將復制的 JSON 部分轉換為結構類型。
go.working.with.json.name.struct=更改結構名稱，鍵入 {0}，然后按 {1} 完成編輯。IDE 將自動修復您的格式設置。
go.working.with.json.introduce.type=提取嵌入到 {1} 結構中的 {0} 結構。\n\
按 {2} 並選擇 {3}。
go.working.with.json.change.style=您可以為標記中的字段名稱應用不同的代碼樣式。例如，將其更改為駱駝拼寫法。\n\
按 {0}，點擊“{1}”，然后選擇“{2}”。
go.working.with.json.update.value.in.tags=標記值的批處理更新也是如此。假設我們想將 {0} 添加到當前結構中的每個標記。\n\
按 {1}，選擇 {2}，然后鍵入 {3}。\n\
您也可以從建議列表中選擇 {0}。<ide/> 知道 JSON、XML 和 ASN1 標記的最常用值。
go.working.with.json.add.key.to.tags=要添加 XML 和 ASN1 標記，也可以使用意圖操作。\n\
按 {0} 再次調用意圖操作，然后選擇 {1} 並鍵入 {2}。
go.code.completion.for.time.package.name=基礎補全：time 軟件包
go.code.completion.for.time.package.year= 要設置日期和時間元素的格式，{0} 軟件包使用以下預定義布局中的值：{1}。這意味著您可以使用引用時間元素作為占位符來定義格式。因此，在編碼時間而不是 {4} 時，您應該寫為 {5}。\n\
如果您忘記了預定義布局中的值，則可以使用代碼補全作為提示。例如，按 {2} 並選擇 {3} 可粘貼年份元素。
go.code.completion.for.time.package.month= 再次按 {0}，然后為月選擇 {1}。
go.code.completion.for.time.package.hour=為小時執行同樣的操作，從建議列表中選擇 {0}。
go.code.completion.for.time.package.minute=為分鐘選擇 {0}，完成模板。
go.support.of.go.embed.name=基礎補全：使用 //go:embed
go.support.of.go.embed.string=使用 {0} 指令，可以在構建期間將文件和目錄嵌入到 Go 二進制文件中。\n\
我們來將 {1} 文件作為 {2} 類型嵌入。按 {3}，然后從建議列表中選擇 {1}。
go.support.of.go.embed.note={0}: 要使用 {1} 指令，請確保已安裝 Go 1.16 或更高版本。有關 Go SDK 安裝的詳細信息，請參閱<a href="{2}">在文檔中下載 Go SDK</a>。
go.support.of.go.embed.navigate=我們的文件還有問題。按 {0} 導航到其他問題
go.support.of.go.embed.fs=檢查表明所指定的目錄不存在。我們可以將它替換成現有目錄。\n\
按 {0}，選擇 {1}，鍵入 {2}，然后選擇 {3}。
go.dump.goroutines.click.button.more=在 {0} 工具窗口中，點擊 {1}。
go.dump.goroutines.dump.tab={0} 選項卡會顯示應用程序的 Goroutine 列表。我們的應用程序有几個 goroutine。但您的實際應用程序可能不止這些。\n\
在 <ide/> 中，您可以應用篩選器來搜索特定的 goroutine，並研究篩選后的結果。
go.struct.fields.lesson.name=創建結構並填充結構字段
go.struct.fields.create.type=使用結構時，您可能希望先編寫具有字段及其值的結構，然后在結構類型中定義所有內容。與示例一樣，我們創建了一個新結構並為其字段定義了值。但我們仍然缺少結構定義。\n\
我們通過按 {0} 並選擇 {1} {2} 快速修復來解決這個問題。
go.struct.fields.type.defined= 現在，已使用相應的字段對 {0} 結構進行了定義。
go.struct.fields.struct.no.fields=還有另一種情況，我們定義了所有內容，但需要為新結構填充字段名。我們可以手動重新輸入，但 <ide/> 針對此過程有一個意圖操作。
go.struct.fields.invoke.intentions=按 {0} 調用意圖操作。
go.apply.fix=選擇 {0} 並按 {1}。
go.navigate.to.error=按 {0} 轉到下一個錯誤。
go.generate.getters.and.setters.name=生成 getter 和 setter
go.generate.getters.and.setters.action=在需要為結構字段生成 getter 和 setter 的情況下，可以使用意圖操作。\n\
按 {0} 並選擇“{1}”。在“{2}”對話框中，按 {3} 並選擇所有可用字段。點擊“{4}”。
go.implement.missing.methods.lesson.name=實現缺少的方法
go.introduce.function.lesson.name=從函數類型創建函數
go.introduce.function.intro=<ide/> 可以從調用創建函數和方法。現在，如果缺少函數或方法，還可以根據其類型進行創建。
go.introduce.function.invoke.intentions=注意文本光標位于 {0} 標識符下，該標識符用作函數引用。按 {1} 調用意圖操作。
go.introduce.function.final.propose=您現在可以根據需要調整參數。
go.fixing.test.lesson.name=修復測試文件
go.fixing.test.open.problems.toolwindow={0} 工具窗口顯示當前文件中的警告和錯誤列表，並描述了這些問題。\n\
測試文件已損壞，來看看有什么問題。\n\
按 {1} 打開 {0} 工具窗口。
go.fixing.test.close.problems=有一些問題需要我們注意。您可以直接在 {0} 工具窗口中解決部分問題。但是有些問題需要編輯器中的特定操作。我們將在編輯器中應用所有修復!\n\
再次按 {2} 關閉 {1} 工具窗口。
go.fixing.test.fix.string.conversion=此 {0} 轉換返回 Unicode 代碼點的 UTF-8 表示，而不是我們期望的十進制字符串表示。\n\
要解決這個問題，請使用 {2} 軟件包的 {1} 方法。按 {3}，然后選擇 {4}。
go.fixing.test.use.multicursors=下一個錯誤非常明顯，我們在匿名 struct 中缺少右大括號和逗號。但是我們不想在每行上都重復鍵入。多光標可能會有所幫助。\n\
要觸发多光標，選擇區域並按 {0}。鍵入 {1} 補全該 struct。
go.fixing.test.fix.camelcase={1} 軟件包的 <a href="{0}">Go 文檔</a>指出，函數名稱必須以駱駝拼寫法書寫(如 {2})。我們的 {3} 函數不符合此慣例。\n\
要修復函數名稱，請按 {4}，然后選擇 {5}。
go.fixing.test.negate=最后一個並不是真正的錯誤，而是一些重構，能夠簡化我們的代碼。注意 {0} 函數中的求反，讓我們看看能做些什么。\n\
按 {1}，將選擇移至 {2} 節點，然后按 {3} 預覽我們將要執行的更改。\n\
看起來不錯，按 {5} 應用 {4} 建議。
go.postfix.templates.lesson.name=后綴模板(nn、panic、rr 和 return)
go.postfix.templates.nn=鍵入 {0}，然后從補全列表中選擇 {1} 后綴模板。
go.postfix.templates.choose.item=鍵入 {0}，然后按 <action>EditorEnter</action>。從建議列表選擇 {1}。
go.postfix.templates.rr={0} 后綴補全模板生成一段代碼，用于檢查錯誤變量是否不為 {1}。您可以使用 {0} 后綴補全模板進行錯誤處理。\n\
現在鍵入 {2}，然后按 {3} 選擇后綴模板。
go.postfix.templates.return=鍵入 {0} 並應用 {1} 后綴模板。
go.var.check.error.postfix.template.name=varCheckError 后綴模板
go.var.check.error.postfix.template.call=來繼續討論錯誤處理。這次是討論 {0} 后綴模板。如果是在返回錯誤的標識符之后鍵入它，<ide/> 會自動添加默認變量名，並且函數會返回錯誤。\n\
嘗試在 {2} 函數后鍵入 {1}，然后從建議列表中選擇 {0}。
go.var.check.error.postfix.template.anonymous.variable=鍵入 {0} 以使用空標識符，然后按 {1}。
go.var.check.error.postfix.template.quick.fix=Go 1.16 為 {0} 引入了新檢查。它確保解封字節切片的值不是 {1}。<ide/> 會檢測此類情況，並提供用于解決這些問題的快速修復。\n\
按 {2} 並選擇 {3}。
go.handling.unhandled.errors.name=處理未處理的錯誤
go.handling.unhandled.errors.handle.error={0} 代碼檢查會通知您返回錯誤值的函數或方法，但不會檢查這些錯誤值。要進行處理，可以使用以下快速修復。\n\
第一個是 {1} 快速修復。它將調用結果分配給變量並生成 {2} 檢查。\n\
我們將它應用到示例中! 按 {3} 並選擇 {1}。
go.handling.unhandled.errors.handle.error.var.name=為變量名鍵入 {0}，然后按 {1}。
go.handling.unhandled.errors.wrap.in.closure=另一種快速修復適用于 {0} 和 {1} 語句。它的運作方式與 {2} 快速修復類似，但也會將代碼包裝在閉包中。\n\
按 {3} 並選擇 {4}。
go.improve.names.lesson.name=錯誤變量的更好名稱
go.improve.names.intro=<ide/> 為錯誤({0})和上下文({1})變量推薦最受歡迎的名稱變體。
go.improve.names.introduce.variable=文本光標在 {0} 調用處。按 {1} 提取變量。
go.improve.names.apply.fix=在列表中選擇整個調用，然后按 {0}。注意，<ide/> 為變量建議了 {1} 名稱，因為它是錯誤的最常用名稱。
go.smart.type.completion.special.cases.lesson.name=類型斷言和 switch 結構
go.smart.type.completion.special.cases.number=如果需要驗證或檢查變量的類型，可以使用類型斷言或 switch 構造。<ide/> 將這些類型顯示在建議列表的開頭。要減少大量建議，可繼續鍵入類型名稱。\n\
讓我們在 {0} 函數中補全驗證。要完成操作，我們需要為 {2} 接口傳遞 {1} 類型。按 {3}，然后選擇 {4} 類型。
go.smart.type.completion.special.cases.line=如果您決定將字符串傳遞至 {0} 函數，會導致 {1} 錯誤。要檢查任意值的類型，可以使用類型 switch 構造。按 {2}，然后選擇 {3}。
go.delete.conversion.lesson.name=冗余類型轉換
go.delete.conversion.intro=<strong>冗余類型轉換</strong>檢查會警告可以省略的冗余類型轉換(例如，當您將字符串文字轉換為字符串時)。在<a href="{0}">冗余類型轉換</a>中可了解有關檢查的更多信息。
go.delete.conversion.invoke.intentions=注意編輯器中的 {0} 函數。文本光標位于 {2} 的 {1} 類型轉換上。按 {3} 調用意圖操作。
go.variadic.functions.lesson.name=可變函數（快速修復和重構）
go.variadic.functions.unpack.slice=可變函數是可以使用不同數量的參數調用的函數，例如 {0}。\n\
可變函數將可變實參作為切片處理。\n\
在我們的示例中，該可變函數為 {1}。\n\
但是，我們無法按原樣將 {2} 切片傳遞至可變函數 {3}。對于這種情況，Go 提供了特殊語法。就是切片之后的省略號({4})。\n\
要解決該錯誤，按 {5}，然后選擇 {6}。
go.variadic.functions.inline=您可以使用切片的可變實參替換切片。按 {0} 調用 {1} 重構。
go.variadic.functions.introduce.variable=要還原 {0} 重構，請使用 {1} 重構。按 {2}，然后從建議列表中選擇 {3}。
go.basic.completion.type.and.choose=默認情況下，<ide/> 會立即補全您的代碼。在文本光標的位置開始鍵入 {0}，您將看到帶有匹配建議的“查找”菜單。您可以按 {2} 從“查找”菜單選擇 {1}。
go.basic.completion.invoke.completion=請注意，<ide/> 會自動插入一個新的導入。接下來，按 {0} 激活基本補全，選擇 {1}，然后按 {2}。
go.press.and.apply.fix=按 {0} 並選擇 {1}。
go.apply.fix.at.once=或者，如果工具提示仍然可見，您可以按 {0} 立即應用建議的快速修復。
go.onboarding.change.ui.settings=在本課中，<ide/> 會將某些 UI 設置更改為默認狀態。完成或退出課程后，將恢復您的偏好設置。
go.onboarding.indexing.description=第一次打開項目時，<ide/> 會掃描 Go SDK 和項目本身，以收集編碼輔助所需的詳細信息。要繼續，請等待索引完成。
go.debug.function.context.menu=您可以通過不同的方式調試代碼。其中的一種方式是利用上下文菜單。\n\
嘗試通過右鍵點擊代碼所在編輯器中的區域調用上下文菜單。
go.autocomplete.json.name=JSON 結構標記的自動補全
go.autocomplete.json.autocomplete=開始填寫 JSON 標記時，在輸入反引號 ({0}) 之后，<ide/> 將建議輸入一個鍵。鍵入一個反引號 {0}，然后選擇 {1}。
go.autocomplete.json.select.style=現在選擇要應用的樣式。我們選擇 {0}！IDE 將保存您的選擇，並為此結構的其他字段建議相同的樣式。
go.export.types.name=導出類型
go.export.types.quickfix=如果您編寫一個返回未導出類型的導出函數，<ide/> 將建議一個快速修復方法來導出該類型。按 {0} 並選擇 {1}。
go.implement.methods.with.todo=使用 TODO 實現方法
go.implement.methods.with.todo.introduction=當您使用 {1} 操作時，{0} 注釋會自動添加到生成的模板中。這些特殊注釋會在編輯器中高亮顯示，編制索引並在 {2} 工具窗口中列出。它將提醒您注意未實現的方法。
go.implement.methods.with.todo.select.type=要添加缺少的類型，請按 {0} 並選擇 {1}。
go.implement.methods.with.todo.select.interface=在 {0} 字段中，輸入 {1}，然后按 {2}。
go.implement.methods.with.todo.enter.struct.name=輸入 {0} 作為新結構的名稱。
go.error.string.formatting.name=將字符串轉換為數字
go.error.string.formatting.parsefloat=<ide/> 有特殊的后綴模板，可以幫助您將字符串轉換為數字。通過輸入點號 ({0}) 並從建議列表中選擇 {1} 來嘗試第一個選項。
go.error.string.formatting.parseint=我們將 {0} 后綴模板應用于 {1}。再次輸入 {2}，選擇 {0}，然后按 {3} 接受默認值。
go.error.string.formatting.goto=我們的程序中仍有一個弱警告。
go.error.string.formatting.introduction=根據<a href="{0}">Go 慣例</a>，您不應將錯誤字符串大寫。如果您不小心忘記了這個慣例，<ide/> 會提醒您。\n\
要更正警告，請按 {1} 並選擇 {2}。
go.to.internal.directory.name=導航、構建約束和代碼格式設置
go.to.internal.directory.build.constraints=根據 <a href="{0}">Bug-resistant build constraints 提案</a>，{1} 將被 {2} 替換。從 {1} 到 {2} 語法的過渡期將從 Go 1.16 持續到 1.18。在 Go 1.16 中，您可以使用舊語法或者同時使用兩種語法。\n\
按 {3} 刪除所選新語法聲明。
go.to.internal.directory=從 {0} 2021.2 開始，您可以導航到 {1} 文件夾中存儲的接口。\n\
按 {2} 轉到 {3} 接口的實現。
go.to.internal.directory.hover.over.tab=順便說一下，要查看文件位置，您可以將鼠標指標懸停在編輯器中的選項卡上。例如，將指針懸停在“{0}”選項卡上。
go.to.internal.directory.reformat.gofmt.on.save= {0} 文件需要重新設置代碼格式。按 {1} 重新設置文件格式。\n\
此外，默認情況下，<ide/> 將在內置的 <ide/> 格式化程序后運行{2}工具。此設置通過 {5} 中的“{4}”選項卡上的“{3}”選項進行配置。
go.type.parameters.module.name=類型形參
go.type.parameters.description=可能有助于您使用類型形參的功能
go.enable.generics.in.go.files.name=使用類型形參
go.enable.generics.in.go.files.enable.quick.fix=默認情況下，對類型形參(或泛型)的支持被禁用。在 2021.2 之前，您僅可以在 {1} 文件中嘗試類型形參，現在此支持已擴展到 {0} 文件。\n\
要在當前 {0} 文件中啟用對類型形參的支持，請在 {3} 類型上按 {2} 並選擇 {4}。
go.enable.generics.in.go.files.use.rename.file=運行代碼的最簡單方式是使用 {0}。為此，您需要將文件轉換成 {3} 擴展名。您可以使用{1}操作進行轉換。\n\
按 {2}，鍵入 {1}，然后從補全列表中選擇該操作。
go.enable.generics.in.go.files.change.extension=更改文件擴展名。完整的文件名應為 {0}。
go.enable.generics.in.go.files.run.in.playground=要在 {0} 中運行生成的文件，請按 {1}。\n\
如果出現確認對話框，請點擊“{2}”將文件設為公開。將在編輯器的右下角顯示包含 {0} 中頁面的鏈接的彈出窗口。
go.enable.generics.in.go.files.click.link=現在，點擊生成的鏈接以在瀏覽器中打開您的代碼。\n\
要在 {0} 中運行您的代碼，請按 {1}。
go.goto.next.error=按 {0} 轉到文件中下一個高亮顯示的錯誤。
go.debug.nil.hide.types.name=類型和 nil 接口的表示
go.debug.nil.hide.types.introduction=Go 中的接口有兩個組件，類型和該類型的值。要使接口為 {0}，這兩個組件都必須為 {0}。如果您的程序中有一個接口，其值包含 {0} 指針，則該接口將不等于 {0}，因為內部類型不是 {0}。在調試過程中，<ide/> 會檢測這種情況，並以不同的方式顯示它們。\n\
我們從創建斷點開始調試。按 {1} 切換斷點。{2}
go.debug.nil.hide.types.variables=在 {0} 窗格中，您可以看到 {1} 和 {2} 接口之間的差異。{1} 接口是 {3}，因為它的值和類型都未設置。與在接口值內部存儲 {4} 類型的 {3} 指針的 {2} 接口不同。無論指針的值是什么，{2} 接口的內部類型都是 {3}。
go.debug.nil.hide.types=如果對象類型占用大量空間，則可以在 {0} 工具窗口中隱藏該對象類型。\n\
試試看！右擊 {1} 窗格中的變量，然后清除顯示的列表中的 {2} 選項。
go.debug.stop.debug=按 {0} 停止調試並完成課程。
go.goto.next.warning=按 {0} 轉到文件中高亮顯示的警告。
go.debug.run.sample=選擇 {0} 目錄項或嘗試 {1}。
js.debugger.module.name={0} 調試器 101
js.debugger.module.description=了解如何逐步運行程序並在不離開 IDE 的情況下找出其中的問題。

js.debugger.before.title=調試前: 運行/調試配置
js.debugger.before.intro.1=使用 <ide/> 可以在代碼編寫位置運行和調試各種 JavaScript 應用。
js.debugger.before.intro.2=我們將在本模塊中介紹一些步驟，無論您調試何種代碼，這些步驟都很有用。我們將以一個非常基本的 <a href=''{0}''>Node.js</a> 應用為例，該應用應比較兩個數字，並返回 {1} 或 {2}。在繼續之前，請確保您的計算機上<a href=''{3}''>已安裝</a> Node.js (對於全新安裝，您需要重啟 <ide/>)。如果您準備好繼續，請按 {4}。
js.debugger.before.describe.tool.window=在按下 {0} 時發生了兩個動作。首先是使用 Node.js 運行文件並打開 {1} 工具視窗，其中顯示運行代碼的結果。其次，<ide/> 創建了一項臨時運行/調試配置，供我們以這樣的方式運行文件。現在使用 {2} 隱藏工具視窗，更好地了解運行/調試配置。
js.debugger.before.save.1=因此，這些配置充當運行/調試應用程序的入口點。它們可以是臨時的，也可以是永久的。主要區別在於，如果達到 5 個配置的默認限制，則會自動刪除臨時配置。
js.debugger.before.save.2=來看看如何將臨時配置轉換為永久配置。打開右上角的 {0} 下拉菜單，然後選擇 {1}。
js.debugger.before.edit=就是它了! 如果要調整這項新運行/調試配置的設置或使用其他配置，現在該怎麼辦? 再次打開 {0} 菜單，然後點擊 {1}。
js.debugger.before.manage.1=這是管理運行/調試配置的位置。要添加新配置，請按 {0}，選擇所需的配置類型，然後根據項目/配置類型指定設置。要微調現有配置，可以點擊配置名稱並更新所需內容。
js.debugger.before.manage.2=花點時間了解一下這裡能找到什麼，準備好繼續操作後，請關閉視窗。
js.debugger.before.next=本課程到此為止。要開始下一個課程，請點擊下面的按鈕或使用 {0}。

js.debugger.part.1.title=調試代碼。第 I 部分
js.debugger.part.1.start.1=現在已經有了運行/調試配置，來看看如何使用內置調試器。
js.debugger.part.1.start.2=首先再運行一​​次代碼以檢查返回的內容，因為上一課中並未重點介紹。點擊含有配置的下拉列表旁邊的 {0} 按鈕，以運行當前所選配置。
js.debugger.part.1.gutter=所比較的數字 {0} 和 {1} 不相等，因此運行代碼時應得到 {2}。我們來找出得到 {3} 的原因。在第 1 行，點擊 #1 和代碼之間的間距(空白)以放置斷點。
js.debugger.part.1.set.breakpoint=我們可以使用斷點來暫停執行應用程序。在間距中看到的紅色圓圈就是 <ide/> 中的斷點。如果再次點擊它，就會將其移除。您也可以點擊鼠標右鍵來自定義其行為，例如為它設置條件。點擊右上角的 {0} 按鈕（或按 {1}）以繼續。
js.debugger.part.1.tool.window.1=了解一下 {0} 工具視窗。左側為停止/重新運行配置和管理斷點的圖標。頂部有幾個選項卡和一組用於逐步執行代碼的圖標。
js.debugger.part.1.tool.window.2=我們所在的“{0}”選項卡是完成大部分工作的位置。右側為按範圍分組的所有{1} 及其值。“{2}”視圖顯示調用堆棧。如果仔細查看，您會看到執行路徑每個點處的應用程序狀態。現在，切換到“{3}”選項卡。
js.debugger.part.1.scripts.tab={0} 選項卡顯示應用程序記錄的錯誤等消息。在調試 Node.js 應用程序時，<ide/> 還顯示 {1} 選項卡，從中可以運行 JavaScript 代碼段並查看控制台消息。切換到 {2} 選項卡以繼續。
js.debugger.part.1.next={0} 選項卡列出加載到當前正在運行的進程中的所有文件。雙擊即可查看任何文件的內容。要轉到本課程的第二部分，請點擊下方按鈕或使用 {1}。

js.debugger.part.2.title=調試代碼。第 II 部分
js.debugger.part.2.step.into.1=<strong>重要提示</strong>: 請確保第 1 行有一個斷點，並且調試器已啟動({0})並在 {1} 選項卡上打開，然後再向前移動。
js.debugger.part.2.step.into.2=我們來繼續查找代碼中的錯誤，並了解在 <ide/> 中進行調試時的一些其他實用信息。為了更好地了解代碼執行方式，我們可以在其中添加更多斷點，然後使用 {0} 按鈕({1})從一個斷點切換到另一個斷點，不過還有一種速度更快的方法。我們來按 {2} 並使用 {3} ({4})進入執行的下一行。
js.debugger.part.2.buttons.1=要了解有關逐步執行該程序的詳細信息，請查看<a href="{0}">我們的在線幫助</a>。
js.debugger.part.2.buttons.2=現在如果我們要檢查一個表達式的值該怎麼辦呢? <ide/> 讓您能夠使用 {0} 彈出視窗快速執行此操作。按 {1} 進行調用。
js.debugger.part.2.evaluate.1=添加 {0} 作為表達式，然後按 {1}。看一下結果: 它等於 {2}。這就是問題所在。為了讓函數捕獲不同的數字，需要略微更改表達式，以使其結果等於 {3}。
js.debugger.part.2.evaluate.2=現在關閉彈出視窗，並修正我們在代碼中發現的問題。在 {0} 中的第 2 行，將 {1} 替換為 {2}。
js.debugger.part.2.stop=最後來了解不再需要調試器時如何將其停止。首先點擊添加的斷點以將其移除。然後使用 {0}({1})停止調試器，並按 {2} 關閉其工具視窗。
js.debugger.part.2.end=恭喜您! 您已經完成了 {0}，並了解了調試各種應用的一些基本方法。如果需要，您可以再運行一次代碼，以確認現在一切正常。要深入了解特定類型應用的調試，請查看我們的 <a href=''{1}''>Web 幫助</a>和<a href=''{2}''>博文</a>。點擊下方按鈕移至下一個模塊。

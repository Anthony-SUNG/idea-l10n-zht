extract.to.method.reference.intention.name=提取到方法引用中
merge.parallel.ifs.intention.name=合並 'if'
merge.parallel.ifs.intention.family.name=合並並行的 if
merge.else.if.intention.name=合並 'else if'
merge.else.if.intention.family.name=合並 else if
change.to.end.of.line.comment.intention.name=替換為行尾注釋
change.to.end.of.line.comment.intention.family.name=替換為行尾注釋
replace.for.each.loop.with.indexed.for.loop.intention.name=將 for-each 循環替換為帶索引的 'for' 循環
replace.for.each.loop.with.iterator.for.loop.intention.name=將 for-each 循環替換為迭代器 'for' 循環
replace.for.each.loop.with.indexed.for.loop.intention.family.name=將 for-each 循環替換為帶索引的 for 循環
replace.for.each.loop.with.optimized.indexed.for.loop.intention.name=將 for-each 循環替換為優化的帶索引 'for' 循環
replace.for.each.loop.with.optimized.indexed.for.loop.intention.family.name=將 for-each 循環替換為優化的帶索引 for 循環
replace.for.each.loop.with.iterator.for.loop.intention.family.name=將 for-each 循環替換為迭代器 for 循環
replace.while.loop.with.do.while.loop.intention.name=將 'while' 循環替換為 'do while' 循環
replace.while.loop.with.do.while.loop.intention.family.name=將 while 循環替換為 do while 循環
replace.do.while.loop.with.while.loop.intention.name=將 'do while' 循環替換為 'while' 循環
replace.do.while.loop.with.while.loop.intention.family.name=將 do while 循環替換為 while 循環
replace.with.javadoc.intention.name=替換為 javadoc
replace.with.javadoc.intention.family.name=替換為 javadoc
#expand.boolean.intention.name=Convert to 'if else'
expand.boolean.declaration.intention.name=將布爾聲明擴展為 'if else'
expand.boolean.return.intention.name=將布爾返回擴展為 'if else'
expand.boolean.assignment.intention.name=將布爾賦值擴展為 'if else'
expand.boolean.intention.family.name=擴展布爾
split.else.if.intention.name=拆分 'else if'
split.else.if.intention.family.name=拆分 else if
convert.to.nested.if.intention.name=轉換為多個 'if'
convert.to.nested.if.intention.family.name=將布爾擴展為多個 if
join.concatenated.string.literals.intention.name=聯接串聯的字符串文字
join.concatenated.string.literals.intention.family.name=聯接串聯的字符串文字
replace.switch.with.if.intention.name=將 'switch' 替換為 'if'
replace.switch.with.if.intention.family.name=將 switch 替換為 if
create.assert.intention.name=創建 JUnit 斷言
create.assert.intention.family.name=創建 JUnit 斷言
merge.if.or.intention.name=合並連續的 'if' 語句
merge.if.or.intention.family.name=合並連續的 'if' 語句
merge.if.and.intention.name=合並嵌套的 'if' 語句
merge.if.and.intention.family.name=合並嵌套的 'if' 語句
replace.concatenation.with.string.buffer.intention.name=將 '+' 替換為 'StringBuffer.append()'
replace.concatenation.with.string.builder.intention.name=將 '+' 替換為 'StringBuilder.append()'
replace.concatenation.with.string.buffer.intention.family.name=將 + 替換為 StringBuilder.append()
move.comment.to.separate.line.intention.name=將注釋移至單獨的行
move.comment.to.separate.line.intention.family.name=將注釋移至單獨的行
change.to.c.style.comment.intention.name=替換為塊注釋
change.to.c.style.comment.intention.family.name=替換為塊注釋
split.declaration.and.initialization.intention.name=拆分為聲明和初始化
split.declaration.and.initialization.intention.family.name=拆分聲明和初始化
char.to.string.intention.name=將字符文字替換為字符串
char.to.string.intention.family.name=將字符替換為字符串
make.call.chain.into.call.sequence.intention.name=將方法調用鏈擴展為調用序列
make.call.chain.into.call.sequence.intention.family.name=將方法鏈擴展為調用序列
merge.call.sequence.to.chain.intention.name=將連續的方法調用合並到調用鏈中
merge.call.sequence.to.chain.intention.family.name=將順序方法調用合並到調用鏈中
detail.exceptions.intention.name=詳細異常
detail.exceptions.intention.family.name=詳細異常
flip.conditional.intention.name=翻轉 '?:'
flip.conditional.intention.family.name=翻轉條件
replace.shift.with.multiply.intention.family.name=將移位替換為乘法
demorgans.intention.family.name=德摩根定律
flip.comparison.intention.family.name=翻轉比較
negate.comparison.intention.family.name=求反比較
flip.commutative.method.call.intention.family.name=翻轉可交換方法調用
constant.subexpression.intention.family.name=計算子表達式的常量值
extract.increment.intention.family.name=提取增量
inline.increment.intention.family.name=內聯增量/減量
flip.assert.literal.intention.family.name=翻轉斷言文字
replace.assert.literal.with.assert.equals.intention.family.name=將 assertTrue、assertFalse 或 assertNull 替換為 assertEquals
replace.multiply.with.shift.intention.family.name=將乘法替換為移位
convert.interface.to.class.intention.name=轉換為 'class'
convert.interface.to.class.intention.family.name=將接口轉換為類
replace.on.demand.import.intention.name=替換為單個類導入
replace.on.demand.import.intention.family.name=將按需導入替換為單個類導入
replace.operator.assignment.with.assignment.intention.family.name=將運算符賦值替換為賦值
convert.catch.to.throws.intention.name=將 'catch' 部分替換為 'throws' 聲明
convert.catch.to.throws.intention.family.name=將 catch 部分替換為 throws 聲明
wrap.vararg.arguments.with.explicit.array.intention.name=用顯式數組創建包裝 vararg 實參
wrap.vararg.arguments.with.explicit.array.intention.family.name=用顯式數組創建包裝 vararg 實參
extract.while.loop.condition.to.if.statement.intention.name=將條件提取到內部 'if' 語句中
extract.while.loop.condition.to.if.statement.intention.family.name=將 while 循環條件提取到內部 if 語句中
replace.concatenation.with.format.string.intention.name=將 '+' 替換為 'String.format()'
replace.concatenation.with.format.string.intention.name.formatted=將 '+' 替換為 'formatted()'
replace.concatenation.with.format.string.intention.family.name=將字符串串聯替換為 String.format()
replace.format.string.with.concatenation.intention.name=將 'String.format()' 替換為串聯
replace.format.string.with.concatenation.intention.family.name=將 String.format() 替換為串聯
copy.concatenated.string.to.clipboard.intention.name=將字符串串聯文本復制到剪貼板
copy.string.literal.to.clipboard.intention.name=將字符串文字文本復制到剪貼板
copy.concatenated.string.to.clipboard.intention.family.name=將字符串串聯文本復制到剪貼板
flip.expression.intention.family.name=翻轉二進制表達式
flip.setter.call.intention.family.name=翻轉 setter 調用
eliminate.parentheses.intention.name=消除括號
reverse.for.loop.direction.intention.family.name=反轉 for 循環的方向
reverse.for.loop.direction.intention.name=反轉 for 循環的方向
replace.operator.assignment.with.postfix.expression.intention.family.name=將運算符賦值替換為后綴表達式
replace.postfix.expression.with.operator.assignment.intention.family.name=將后綴表達式替換為運算符賦值
replace.postfix.expression.with.assignment.intention.family.name=將后綴表達式替換為賦值
replace.assignment.with.postfix.expression.intention.family.name=將賦值替換為后綴表達式
annotate.overridden.methods.intention.family.name=注解重寫方法及其參數
annotate.overridden.methods.intention.method.name=將重寫方法注解為 ''{0}''
annotate.overridden.methods.intention.parameters.name=將重寫方法的相同形參注解為 ''{0}''
replace.arm.with.try.finally.intention.name=將 'try-with-resources' 替換為 'try finally'
replace.arm.with.try.finally.intention.family.name=將 try-with-resources 替換為 try-finally
merge.nested.try.statements.intention.name=合並嵌套的 'try' 語句
merge.nested.try.statements.intention.family.name=合並嵌套 try 語句
obscure.thrown.exceptions.intention.family.name=將 throws 子句中的異常替換為單個更普通的異常
change.modifier.intention.name=更改訪問修飾符
change.variable.type.to.rhs.type.intention.family.name=將變量類型更改為初始值設定項的類型
unicode.unescape.intention.name=將 Unicode 轉義替換為字符
unicode.unescape.intention.family.name=將 Unicode 轉義替換為非轉義字符
replace.octal.escape.with.unicode.escape.intention.name=將八進制轉義替換為 Unicode 轉義
replace.octal.escape.with.unicode.escape.intention.family.name=將八進制轉義替換為 Unicode 轉義
negate.conditional.intention.name=求反 '?:'
negate.conditional.intention.family.name=求反條件
objects.require.non.null.intention.name=使用 'java.util.Objects.requireNonNull()' 表達式
objects.require.non.null.intention.family.name=使用 'java.util.Objects.requireNonNull()' 表達式
postfix.prefix.intention.family.name=翻轉前綴/后綴表達式
replace.conditional.with.boolean.expression.intention.family.name=將條件表達式替換為布爾表達式
replace.conditional.with.boolean.expression.intention.name=將 '?:' 替換為布爾表達式
replace.with.arrays.as.list.intention.family.name=替換為 'Arrays.asList()'
replace.with.mutable.collection.intention.family.name=替換為可變集合

#hand made
flip.smth.intention.name=翻轉 ''{0}''
flip.smth.intention.name1=翻轉 ''{0}'' (更改語義)
flip.comparison.intention.name=將 ''{0}'' 翻轉為 ''{1}''
negate.comparison.intention.name=求反 ''{0}''
negate.comparison.intention.name1=將 ''{0}'' 求反為 ''{1}''
flip.commutative.method.call.intention.name=翻轉 ''.{0}()''
flip.commutative.method.call.intention.name1=翻轉 ''.{0}()'' (可能更改語義)
constant.expression.intention.name=計算 ''{0}'' 的常量值
#suppress inspection "UnusedProperty"
press.escape.to.remove.highlighting.message=按 Esc 移除高亮顯示
extract.increment.intention.name=提取 ''{0}''
inline.increment.intention.name=內聯 ''{0}''
replace.assert.literal.with.assert.equals.intention.name=將 ''{0}()'' 替換為 ''assertEquals({1}, ...)''
replace.assert.literal.with.assert.equals.intention.name2=將 ''{0}()'' 替換為 ''assertEquals()''
replace.assert.literal.with.assert.equals.intention.name1=將 ''{0}()'' 替換為 ''assertEquals(..., {1}, ...)''
flip.setter.call.intention.name=翻轉 Setter 調用
adapter.to.listener.intention.name=將 ''{0}'' 的擴展替換為 ''Listener'' 實現
adapter.to.listener.intention.family.name=將適配器擴展替換為偵聽器實現
change.variable.type.to.rhs.type.intention.name=使用類型 ''{1}'' 聲明 ''{0}''


#categories

#warnings
0.is.declared.in.1.but.when.public.should.be.declared.in.a.file.named.2={0} 已在 {1} 中聲明，但 public 應在名稱為 {2} 的文件中聲明
0.will.have.incompatible.access.privileges.with.super.1={0}的訪問權限與超級{1}不兼容
0.will.no.longer.be.visible.from.overriding.1={0}將不再可以從重寫{1}可見
0.will.have.incompatible.access.privileges.with.overriding.1={0} 的訪問權限與重寫 {1} 不兼容
0.already.extends.1.and.will.not.compile.after.converting.2.to.a.class=實現{2}的{0}已擴展{1}並且在將{2}轉換為類后不會編譯
change.modifier.text=將 ''{0}'' 設為{1}
convert.datapoints.fix.family.name=轉換 @DataPoint 注解文件夾
make.method.default.family.name=使方法為默認值
intention.name.make.default=將 ''{0}()'' 設為默認值
create.missing.switch.branches.family.name=創建缺少的 switch 分支
intention.name.replace.field.or.method=替換為 @{0} {1, choice, 0#字段|1#方法}

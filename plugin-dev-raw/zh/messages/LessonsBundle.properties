### README.md strings

readme.welcome.header=認識交互式功能培訓工具
readme.ift.description=此交互式課程將引導您完成許多 IDE 工作流和用例，附帶許多實用的操作快捷鍵。您不需要全部記住這些快捷鍵，只需嘗試並使用最實用的快捷鍵。在日常工作中，您可能會遇到新問題，請複習此課程並嘗試其他功能。敬請關注新課目，它們可以幫助您更高效地使用 {0}。
readme.usage.header=如何使用課程
readme.toolwindow.description=`{0}` 工具視窗包含多個模塊，其中包含相應的課目集合，您能夠以任意順序學習這些課目。完成一課的學習後，系統會將其標記為完成。您可以根據已完成的課目了解自己的學習進度，如果您希望回顧知識，可以重新學習。
readme.experienced.users.remark=即使您熟悉某一課，也不妨學習一下: 您可能會發現一些有用的示例和常用功能的未知快捷鍵!
readme.start.header=開始
readme.indexing.description=在學習項目初始化期間，您可能會閱讀此 `README.md`。通常，“索引編制”是項目初始化期間最耗時的操作。IDE 需要收集與您的環境和項目{0,choice,1#, 庫|2#}有關的信息，並構建內部表示。快速導航和搜索需要索引。
readme.navigation.hint=本課程中的 `{0}` 模塊將顯示使用方法。
readme.shortcuts.header=管理快捷鍵
readme.shortcuts.problem.description=此課程中的某些快捷鍵可能與系統或其他應用程序快捷鍵衝突。在這種情況下，您可以在課目的文本中點擊有問題的快捷鍵。將打開一個彈出視窗並向您顯示操作名稱和替代快捷鍵。您將能夠應用操作或分配新快捷鍵。
readme.bug.tracker.remark=如果遇到其他問題，請嘗試重新開始課目，或者在[我們的問題跟踪器]({0})中報告。
readme.conclusion.header=返回項目
readme.exit.options=要返回歡迎屏幕，只需關閉項目視窗。或者，從主菜單中選擇 `{0} | {1}`。您也可以使用 `{0}` 選單打開或創建新項目。預設情況下，`{2}` 工具視窗處於隱藏狀態。從主菜單中選擇 `{3} | {4}` 可將其打開。
readme.feedback.request=歡迎提供您對此學習課程的反饋，我們將不勝感激!

### This file contains strings from lessons.

###############################################################################
## Common lessons
###############################################################################

## Essential module
essential.module.name=基本
essential.module.description=了解 {0} 最基本的功能

context.actions.lesson.name=上下文操作
context.actions.invoke.intentions.for.warning=在許多情況下，<ide/> 可以猜測您的<strong>意圖</strong>或為您提供警告或錯誤的修正建議。我們來調用最有用的操作之一 - {0}。按 {1}。
context.actions.fix.warning=對此警告應用第一項快速修復: {0}。
context.actions.invoke.general.intentions=<ide/> 有許多意圖! 每次您覺得可能是一種不錯的解決方案或意圖時，都可以嘗試調用 {0}。這樣可以節省大量時間，並使編碼過程更有趣! 現在，我們來看看可以對文本光標所在的代碼段應用哪些內容。再次按 {1}。
context.actions.apply.intention=我們來應用 {0} 意圖。
context.actions.refactorings.promotion=請注意，許多有用的重構無法通過 {0} 使用。轉到 {1} 模塊了解如何調用和使用這些重構。

## Editor basics module
editor.basics.module.name=編輯器基礎知識
editor.basics.module.description=使用智能快捷鍵添加、刪除、選擇、移動和複製代碼。

goto.action.lesson.name=搜索操作
goto.action.mac.workaround=如果<strong>終端</strong>搜索打開，而不是{0}，請參閱<a href="{1}">本文</a>。
goto.action.use.find.action.1=最有用的快捷鍵之一是 {0}。通過它可以搜索所有可進行的操作，而不必了解各個快捷方式。立即使用 {1} 嘗試。
goto.action.use.find.action.2=您也可以按兩下 {1} 來調用 {0}。通過使用 {0}，您可以同時查找項目代碼實體<strong>和</strong>其他 IDE 對象。使用使用何種方式由您決定。
goto.action.invoke.about.action=假設您想了解 <ide/>，請鍵入 {0}，然後按 {1}。
goto.action.to.return.to.the.editor=按 {0} 返回編輯器。
goto.action.invoke.again=您也可以使用 {0} 或按兩下 {1} 更改設定。嘗試重新調用它。
goto.action.show.line.numbers.request=鍵入 {0} 以查看 {1} 選擇器。
goto.action.first.lines.toggle={0, choice, 0#關閉|1#開啟} 行號。
goto.action.second.lines.toggle=現在，將行號切換回{0, choice, 0#開啟|1#關閉}狀態。
goto.action.propose.to.go.next.new.ui=太棒了! 只需按 {0} 或點擊下面的按鈕即可開始下一課。
goto.action.popup.closed.warning.message=按 {0} 或按兩次 {1} 可再次打開搜索視窗。

collapse.lesson.name=收起
collapse.try.collapse=有時您需要收起一段代碼以提高可讀性。嘗試使用 {0} 收起代碼段。
collapse.hit.expand=要展開代碼區域，請按 {0}。
collapse.all.collapse=如果要收起檔案中的所有區域，請按 {0}。
collapse.all.expand=同樣，按 {0} 可展開所有可用區域。

duplicate.and.delete.lines.lesson.name=複製和刪除行
duplicate.and.delete.lines.duplicate.line=使用 {0} 複製文本光標所在的行。
duplicate.and.delete.lines.duplicate.several.lines=現在，按 {0} 複製所選行。
duplicate.and.delete.lines.delete.line=要刪除當前行，請使用 {0} 操作。

move.lesson.name=移動代碼段
move.pull.down=重新排列行通常涉及兩項操作: 剪下和貼上。使用 <ide/>，只需執行一項操作。按 {0} 向下拉取當前行。
move.pull.up=同樣，要向上拉取一行，請按 {0}。
move.whole.method.up=嘗試使用 {0} 將整個方法上移。請注意，文本光標應位於方法的標頭處。
move.whole.method.down=現在，使用 {0} 將其下移。

multiple.selections.lesson.name=多選
multiple.selections.select.symbol=按 {0} 可選擇文本光標處的符號。
multiple.selections.select.next.symbol=再次按 {0} 可選擇此符號的下一個匹配項。
multiple.selections.deselect.symbol=按 {0} 可取消選擇上一個匹配項。
multiple.selections.select.all=按 {0} 可選擇檔案中的所有匹配項。
multiple.selections.replace=鍵入 {0}，將 {1} 的所有匹配項替換為 {0}。

selection.lesson.name=擴大和縮小代碼選區
selection.select.word=將文本光標放在任何單詞前面。按 {0} 可將文本光標移至下一個單詞，然後選擇二者之間的所有內容。
selection.extend.selection=按 {0} 可將選區擴展到下一個代碼塊。
selection.extend.until.whole.file=嘗試使用 {0} 增大選區，直至選擇整個檔案為止。
selection.shrink.selection={0} 可以縮小選區。嘗試使用。

new.selection.select.word=按 {0} 可選擇文本光標處的單詞。
new.selection.select.string=再次按 {0} 可選擇整個字符串。
new.selection.add.quotes=第三次按 {0} 以在選擇中添加引號。
new.selection.select.call=再按 {0} {1,choice,1#一|2#兩|3#三|4#四}次可選擇整個調用。
new.selection.unselect=假設我們實際上要選擇它的參數，而不是選擇整個調用。請按 {0} 將選區縮小到參數。
new.selection.select.if=我們將文本光標移至 {0} 語句的開頭。按兩次 {1} 將其選中。只需按幾下，即可很好地將關鍵字作為選擇對應語句的一個起點。

comment.line.lesson.name=註釋行
comment.line.comment.any.line=使用 {0} 註釋掉任意一行。
comment.line.uncomment.that.line=取消對使用相同快捷鍵註釋過的行的註釋。按 {0}。
comment.line.comment.several.lines=選擇幾行，然後使用 {0} 註釋掉。

surround.and.unwrap.lesson.name=環繞和解開
surround.and.unwrap.invoke.surround=按 {0} 使用一些模板代碼環繞所選代碼段。
surround.and.unwrap.choose.surround.item=選擇 {0} 條目。
surround.and.unwrap.invoke.unwrap=通過 {0} 的解開操作返回到先前的狀態。
surround.and.unwrap.choose.unwrap.item=選擇 {0} 條目。
surround.and.unwrap.help.surround.code.fragments=環繞代碼段
surround.and.unwrap.help.unwrapping.and.removing.statements=解開和移除語句

## Completion module
code.completion.module.name=代碼補全
code.completion.module.description=讓 IDE 補全您的代碼。嘗試基本、智能和其他類型的補全。

basic.completion.lesson.name=基本補全
basic.completion.start.typing=預設情況下，<ide/> 會立即提供代碼補全建議。在文本光標所在位置處開始鍵入 {0}，您會看到帶有匹配建議的補全列表。
basic.completion.just.press.to.complete=現在，只需按 {0} 即可補全此語句。
basic.completion.activate.explicitly=要顯式激活基本補全，請按 {0}。
basic.completion.finish.explicit.completion=選擇 {0} 並按 {1}。

completion.with.tab.lesson.name=使用 Tab 補全
completion.with.tab.begin.completion=按 {0} 查看補全建議。如果在建議列表中未看到 {1}，則開始輸入 {1}，直至看到此條目。
completion.with.tab.finish.with.tab=選擇 {0} 並按 {1}。此操作不是簡單地插入所選建議，而是完全替換文本光標處的單詞。

smart.completion.lesson.name=類型匹配補全

postfix.completion.lesson.name=後綴補全
postfix.completion.intro=後綴補全有助於編寫代碼時減少向後跳轉文本光標。它支援您根據添加的後綴、表達式的類型及其上下文，將已鍵入的表達式轉換為另一種表達式。

## Refactoring module
refactorings.module.name=重構
refactorings.module.description=通過重命名、提取和其他類型的重構保持代碼整潔。
refactorings.change.settings.warning.message=要完成本課，請在編輯器設定中更改重構選項。按 {0}，轉到“{1}”<strong>→</strong>“{2}”，然後選擇“{4}”下面的“{3}”。或<callback id="{5}">點擊</callback>以更改設定。

rename.lesson.name=重命名

refactoring.menu.lesson.name=重構選單
refactoring.menu.show.refactoring.list=<ide/> 支援多種重構。其中許多重構都有自己的快捷鍵。要訪問某些很少使用的重構，請按 {0} 並預覽部分列表。
# Next string does not require translation
refactoring.menu.introduce.parameter.eng=假設您想通過重構操作將此表達式替換為參數。因此我們需要選擇 {0}。現在只需鍵入 <strong>pa</strong> (introduce <strong>pa</strong>rameter) 或 <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter) 以減少建議的列表。
refactoring.menu.introduce.parameter=假設您想通過重構操作來將此表達式替換為一個參數。請從列表中選擇 {0}，然後按 {1}。
refactoring.menu.start.refactoring=按 {0} 開始 {1} 重構。<strong>注意</strong>，您可以從重構選單中了解重構快捷鍵。
refactoring.menu.finish.refactoring=要完成重構，您需要選擇一些名稱或保留其預設名稱，然後按 {0}。

## Code Assistance module
code.assistance.module.name=代碼輔助
code.assistance.module.description=了解如何設定代碼格式、獲取形參信息和預覽快速彈出視窗。

code.format.lesson.name=代碼格式
code.format.reformat.selection=<ide/> 可以幫助您通過一項操作糾正代碼格式。使用 {0} 重新格式化所選代碼段。
code.format.reformat.file=要在未選擇任何行的情況下重新格式化整個檔案，請使用 {0}。
code.format.show.reformat.file.dialog=使用 {0} 顯示重新格式化設定。
code.format.optimize.imports=您可以在此處配置重新格式化選項。例如，啟用 {0}，然後點擊 {1}。

parameter.info.lesson.name=形參信息
parameter.info.use.action=按 {0} 查看方法簽名。
parameter.info.add.parameters=使用 {0} 的 width 和 {1} 的 height。

quick.popups.lesson.name=快速彈出視窗
quick.popups.show.documentation=按 {0} 可查看文本光標處符號的文檔。
quick.popups.press.escape=按 {0} 可關閉彈出視窗。
quick.popups.show.implementation=按 {0} 可查看文本光標處符號的定義。

editor.coding.assistance.lesson.name=編輯器編碼輔助
editor.coding.assistance.goto.next.error=按 {0} 可轉到檔案中下一個高亮顯示的錯誤。
editor.coding.assistance.fix.error=我們來修正此錯誤。按 {0}，然後選擇 {1}。
editor.coding.assistance.goto.next.warning=我們轉到下一個警告。按 {0}。
editor.coding.assistance.show.warning.description=此外，您還可以查看文本光標處條目的警告或錯誤說明。按 {0} 可查看簡要說明，然後再次按 {0} 可展開說明。
editor.coding.assistance.fix.warning=彈出視窗顯示了一條修正此警告的重構操作建議。
editor.coding.assistance.highlight.usages=另一種有用的工具是高亮顯示用法。按 {0} 可高亮顯示檔案中文本光標處符號的所有用法。

## Navigation module
navigation.module.name=導航
navigation.module.description=跳轉到原始碼，導航到聲明、實現和檔案結構。

declaration.and.usages.lesson.name=聲明和用法
declaration.and.usages.jump.to.declaration=按 {0} 跳轉到方法的聲明。
declaration.and.usages.show.usages=文本光標現在位於方法聲明中。使用相同的快捷鍵 {0} 可查看其所有用法，然後選擇其中之一。
declaration.and.usages.find.usages=按 {0} 可查看更詳細的用法視圖。您可以對聲明或用法調用 {0}。
declaration.and.usages.pin.motivation=在 {0} 視圖中，您可以同時導航到用法和聲明。下次搜索將在 {0} 視圖中重寫這些結果。 為防止這種情況，請固定結果:
declaration.and.usages.right.click.tab=右鍵點擊頁籤標題，{0}。
declaration.and.usages.select.pin.item=選擇 {0}。
declaration.and.usages.hide.view=瀏覽完用法後，按 {0} 可隱藏視圖。
declaration.and.usages.open.find.view=按 {0} 可再次打開 {1} 視圖。

file.structure.lesson.name=檔案結構
file.structure.open.popup=大型源文件可能難以讀取和瀏覽。有時您只需要預覽此類檔案。按 {0} 可打開檔案結構。
file.structure.request.prefixes=假設您想找到名稱中含有 {0} 和 {1} 單詞的方法。鍵入 {2} (所需單詞的前綴)可篩選檔案結構。
file.structure.navigate=僅剩一個條目。現在，按 {0} 跳轉到所選項目。
file.structure.toolwindow=<ide/> 也可以將檔案結構顯示為工具視窗。使用 {0} 將其打開。

recent.files.lesson.name=最近的檔案和位置
recent.files.first.transition=想知道 {0} 方法是如何實現的嗎? 讓我們使用 {1} 來查看它的聲明。
recent.files.dialog.message=我們想模擬基本工作流: 在檔案之間快速導航。請等待直至完成。
recent.files.dialog.title=工作流模擬
recent.files.progress.title=正在打開檔案
recent.files.show.recent.files=我們深入查看了庫檔案。怎樣才能返回到我們的檔案?<ide/> 有一項功能可以幫助我們顯示最近打開的檔案。按 {0}。
recent.files.search.typing=您可以按文件名搜索檔案。鍵入 {0} (所需單詞的前綴)。
recent.files.search.jump=僅剩一個檔案。現在，按 {0} 跳轉到所選檔案。
recent.files.use.recent.files.again=我們已返回到檔案。我們來使用 {0} 再次查看最近的檔案。
recent.files.delete=此列表中包含很多我們不想再打開的源文件。我們來使用 {1} 從最近的檔案歷史記錄中刪除 {0} 個檔案。
recent.files.close.popup=現在，最近檔案的歷史記錄更乾淨了。點擊彈出視窗外部的某個位置將其關閉或使用 {0}。
recent.files.show.recent.locations=通過另一項實用操作，您可以在最近訪問的檔案中發現您的代碼。按 {0}
recent.files.locations.search.typing=在此處，可以根據您記得的代碼段進行搜索。請鍵入 {0}
recent.files.locations.search.jump=現在，選擇高亮顯示的片段，然後按 {0} 打開包含的檔案。

search.everywhere.lesson.name=隨處搜索
search.everywhere.invoke.search.everywhere=要打開 {0}，需要按兩次 {1}。
search.everywhere.type.prefixes=假設您正在查找名稱中包含 {0} 和 {1} 單詞的類。在搜索字段中鍵入 {2} (所需單詞的前綴)。
search.everywhere.navigate.to.class=使用鍵盤箭頭鍵選擇 {0}，然後按 {1} 可跳轉到此類的定義。
search.everywhere.goto.class=太棒了! 但是，有時您需要只查找類，或者只在某些特定目錄中進行搜索。\n使用 {0} 可縮小搜索範圍。
search.everywhere.type.class.name=假設您需要一些負責從輸入流進行緩衝讀取的庫類。鍵入 {0} (所需單詞的前綴)。但先不要導航到那裡!
search.everywhere.use.all.places=現在，您可以在這個演示項目中看到一個類。但我們需要找到它在庫中的實現。我們來將 {0} 篩選器切換到 {1}，您會看到可用庫的內容。
search.everywhere.class.popup.closed.warning.message=按 {0} 可再次打開搜索視窗。
search.everywhere.quick.documentation=按 {0} 預覽可用的文檔。
search.everywhere.close.documentation.popup=按 {0} 可關閉彈出視窗。
search.everywhere.finish=<strong>完成!</strong>。您可以使用 {0} 查找方法或全局變量，並使用 {1} 查找檔案。
search.everywhere.navigation.promotion=您將在 {0} 模塊中找到其他導航操作和工作流用例。

find.in.files.lesson.name=在檔案中查找並替換
find.in.files.show.find.popup=假設您希望查找某個字符串在項目中的所有匹配項。按 {0} 可打開 {1} 視窗。
find.in.files.type.to.find=鍵入 {0} 以搜索“學習”項目中的所有文本匹配項。
find.in.files.whole.words=您應當會找到 <code>apple</code> 字符串，但也會找到一些 <code>pineapple</code> 條目。我們來將搜索範圍縮小到一個完整的單詞。點擊 {0} 或按 {1}。
find.in.files.select.row=您可以在嵌入式編輯器中查看找到的字符串的上下文。點擊高亮顯示的行或使用 {0} 和 {1} 按鈕導航到該行。
find.in.files.go.to.file=此外，您也可以在主編輯器中打開所選檔案。按 {0} 或雙擊該行以移至此檔案。
find.in.files.show.replace.popup=假設您想用另一個字符串替換所有找到的匹配項。按順序在每個檔案中執行替換可能非常枯燥。<ide/> 將幫助您完成此任務。按 {0} 可打開 {1} 視窗。
find.in.files.type.to.replace=我們來用 {1} 替換 {0} 的所有匹配項。在高亮顯示的字段中鍵入 {1}。
find.in.files.select.directory=您可以定義搜索和替換的範圍。點擊 {0} 按鈕或按 {1} 將替換範圍縮小到當前目錄。
find.in.files.press.replace.all=按 {0} 開始重構。
find.in.files.confirm.replace=最後按 {0} 確認重構。
find.in.files.popup.closed.warning.message=按 {0} 可再次打開 {1} 視窗。

extract.method.lesson.name=提取方法
extract.method.invoke.action=按 {0} 將所選代碼塊提取到方法。
extract.method.start.refactoring=點擊 {0} 開始重構。
extract.method.confirm.several.replaces=雞尾酒排序有兩個交換位置。第一個片段剛剛被提取。點擊 {0} 同時提取它們。
extract.method.second.fragment=您現在可以確認或拒絕替換第二個片段。

extract.variable.lesson.name=提取變量
extract.variable.start.refactoring=按 {0} 從 {1} 表達式中提取局部變量。
extract.variable.replace.all=所選表達式在此代碼塊中出現 3 次。選擇列表中的第二項以替換所有匹配項。
extract.variable.choose.name=為新變量選擇名稱，或者保留不變。按 {0} 補全重構。

## Run/Debug module
run.debug.module.name=運行並調試
run.debug.module.description=使用 IDE 可視調試器運行代碼並修正錯誤。

run.configuration.lesson.name=運行配置
run.configuration.hide.toolwindow=<ide/> 自動打開 {0} 工具視窗。提示: 在 {0} 工具視窗的頂部，您可以看到完整運行命令。現在，我們來通過 {1} 隱藏工具視窗。
run.configuration.list.not.shown.warning=請在“{1} → {2}”選單中選擇“{0}”選項。啟用工具欄並完成本課需要該選項。或者<callback id="{3}">點擊</callback>以更改設定。
run.configuration.temporary.to.permanent=針對每個新的運行，<ide/> 會創建臨時運行配置。當數量超過預設限值(5 個)時，臨時配置會被自動刪除。我們來將臨時配置轉換為永久配置。打開包含運行配置的下拉選單。
run.configuration.select.save.configuration=選擇 {0}。
run.configuration.edit.configuration=假設您要更改配置或手動創建另一個配置。您需要再次打開下拉選單，然後點擊 {0}。您也可以使用 {1} 操作。
run.configuration.settings.description=這是管理運行/調試配置的位置。您可以在此處設定程序形參、JVM 實參、環境變量等。
run.configuration.tip.about.save.configuration.into.file=提示: 有時您可能需要將配置保存到自身的檔案中。此類配置易於在同事之間共享(一般通過版本控制系統)。現在，關閉設定對話框以完成本課。

debug.workflow.lesson.name=調試工作流
debug.workflow.incorrect.breakpoints=本課的斷點設定不正確。
debug.workflow.run.program=在調試前運行程序，看看有哪些問題 {0}。
debug.workflow.toggle.breakpoint=因此，有一個問題。我們先來研究如何放置斷點。要設定斷點，請點擊左編輯器間距或者按 {0}。
debug.workflow.start.debug=要開始調試所選運行配置，請點擊 {0} 或按 {1}。
debug.workflow.need.restart.lesson=調試會話已停止。重新開始該課目。
debug.workflow.return.to.editor=許多跟踪操作都將焦點轉移到調試工具視窗。我們來使用 {0} 返回編輯器。
debug.workflow.use.watches=<ide/> 有幾種顯示變量值的方式。針對此步驟，我們選擇了調用。我們來將其添加到 {0} 中。您可以將表達式複製到剪貼簿，點擊調試工具視窗上的 {1} 按鈕，然後貼上複製的文本。您也可以只執行 {2} {3} 操作。
debug.workflow.consider.to.add.a.shortcut=(不妨稍後指定快捷鍵)
debug.workflow.step.into=我們來單步進入。您可以在調試面板上執行 {0} 操作或使用 {1} 選項。
debug.workflow.choose.method.to.step.in=在大多數情況下，您可能想要跳過參數計算，因此“智能單步進入”功能預設會建議包裝方法。但在這裡需要選擇第二種: {0}。您可以通過鍵盤 {1} 進行選擇並按 {2}，或者點擊該調用。
debug.workflow.quick.evaluate=我們來看看將傳遞給 {0} 的內容。為所選參數調用快速求值表達式 {1}。
debug.workflow.fix.error=糟糕，我們在數組索引中犯了一個錯誤! 現在，我們來修正此錯誤。關閉彈出視窗({0})並將 0 更改為 1。
debug.workflow.step.over=我們來檢查 {0} 的調用現在是否拋出異常。使用“單步跳過”操作 {1} 或點擊 {2} 選項。
debug.workflow.mute.breakpoints=糟糕，又是相同的斷點。現在，我們不需要在此斷點處停止。請點擊 {0} 選項或執行操作 {1} 來禁止斷點。
debug.workflow.run.to.cursor=來檢查 {0} 的結果。我們已將編輯器光標移至 {1} 語句。按 {2} 或點擊 {3}。或者，點擊行號。請注意，即使斷點被禁止，{4} 仍然有效。
debug.workflow.evaluate.expression={0} 似乎不是我們要查找的平均值。我們忘記了按長度劃分。似乎需要返回 {1}。我們來核實一下猜測。按 {2} 或點擊 {3} 選項。
debug.workflow.type.result=在 {1} 字段中鍵入 {0} 以補全工作。
debug.workflow.evaluate.it=按 {0} 或點擊 {1}。
debug.workflow.stop.debug=這是正確的答案! 我們來關閉對話框並通過 {0} 或 {1} 按鈕停止調試。
debug.workflow.resume=目前似乎沒有異常。繼續使用 {0} 執行或點擊 {1} 按鈕。

duplicate.and.delete.lines.select.several.lines=您可以對多行應用相同的操作。例如，按兩下 {0} 以選擇當前行和上一行。
duplicate.and.delete.lines.unexpected.selection.restore=意外選區
proceed.to.the.next.step=<callback id="{0}">點擊以繼續</callback>
local.history.lesson.name=恢復移除的代碼
local.history.remove.code=在本課中，您將學習如何使用 {0} 恢復代碼。按 {1} 移除選定的代碼片段。
local.history.file.modification.progress=正在修改檔案
local.history.editor.hint=當前步驟禁用檔案修改。
local.history.dialog.message=IDE 會模擬編輯檔案的過程。請等待它完成。
local.history.imagine.restore=假設您需要恢復在開始時刪除的代碼。{0} 操作無法幫助您，因為自那以後發生了許多其他更改，您可能會失去這些更改。
local.history.invoke.context.menu=使用 {0}，只需點擊幾下即可恢復已刪除的代碼。右擊編輯器可調出上下文選單。
local.history.show.history=選擇 {0} → {1}。
local.history.select.revision={0} 對話框的左側窗格顯示當前檔案的已保存修訂列表。當您編輯代碼、運行測試和執行其他操作時，項目狀態會自動保存到 {1}。例如，選擇高亮顯示的修訂。
local.history.restore.code=右側窗格顯示了一個差異查看器，該查看器顯示了每個版本與當前版本之間的差異。您可以看到本課開始時刪除的此修訂版中的代碼。點擊 V 形按鈕 {0} 可恢復代碼片段。
local.history.restore.code.balloon=點擊可恢復代碼片段
local.history.close.window=關閉對話框以返回到更改後的代碼。按 {0}。
local.history.congratulations=很好！您已恢復了代碼片段！
onboarding.return.to.welcome.remark=\ 並返回歡迎屏幕
context.actions.help.intention.actions=意圖操作
collapse.help.link=展開或收起代碼元素
multiple.selections.help.multiple.carets=多個文本光標和選擇範圍
selection.help.select.code.constructs=選擇代碼結構
basic.completion.help.code.completion=基本補全
postfix.completion.help.link=後綴代碼補全
help.search.everywhere=隨處搜索
help.lines.of.code=代碼行
help.code.completion=代碼補全
rename.help.link=重命名重構
refactoring.menu.help.link=調用重構
local.history.help.link=本地歷史
code.format.help.link=正在配置代碼樣式
parameter.info.help.link=形參信息
quick.popups.help.link=快速彈出視窗
editor.coding.assistance.help.link=使用原始碼
declaration.and.usages.help.link=轉到聲明及其類型
file.structure.help.link=查看源文件結構
recent.files.locations.help.link=查找最近的檔案
find.in.files.help.link=搜索和替換項目中的目標
extract.method.help.link=提取方法
extract.variable.help.link=提取/引入變量
run.configuration.help.link=運行/調試配置
debug.workflow.help.link=調試代碼
restore.settings.informer=在本課中，您更改了一些 IDE 設定。如果要恢復已修改的選項，請<callback id="{0}">點擊</callback>。
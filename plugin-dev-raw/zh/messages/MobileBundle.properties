build=構建
build.something=構建 {0}
generate.xcodeproj=生成 Xcode 項目
run.configuration.name=Kotlin Mobile
run.configuration.description=iOS/Android 應用
run.configuration.test.name=Kotlin Mobile 測試
run.configuration.test.description=XCTest/JUnit 測試
run.configuration.editor.module=模塊:
run.android.started=會話以進程 {0} 開始
run.android.finished=進程已完成
run.waiting=正在等待設備…
run.preparing=正在準備應用程序…
run.installing=正在安裝應用程序…
run.installing.tests=正在安裝測試運行程序…
run.starting=正在啟動應用程序…
run.starting.tests=正在開始測試…
run.configuration.name.common.tests=通用測試
run.configuration.name.apple=iOS 應用
run.configuration.name.apple.tests=iOS 庫測試
run.configuration.name.apple.tests.xctest=iOS 應用測試
run.configuration.name.android=Android 應用
run.configuration.name.android.tests=Android 庫測試
run.configuration.device.not.selected=未選擇目標設備

device.host=本地設備
device.not.selected=未選擇設備
notification.group.id=移動
xcodeproj.changed.manually=Xcode 項目已手動修改
xcodeproj.changed.manually.description=對 Xcode 項目的變更沒有效果。\n請使用 Gradle 配置項目設定。
sdk.sync.missing.sdk.title=Android SDK
sdk.sync.missing.sdk.content=找不到 Android SDK。請安裝 SDK 並在 local.properties 中設定 sdk.dir。
run.configuration.name.android.app.tests=Android 應用測試
android.emulator.launch.timeout=無法啟動模擬器: 超時
android.aapt.empty=AAPT 沒有為 ''{0}'' 返回數據
android.aapt.no.package=AAPT 未返回軟件包名稱
android.aapt.no.main=AAPT 沒有為 ''{0}'' 返回主 Activity 名稱
gradle.loading=正在加載 Gradle Apple 項目…
import.build.view.name=導入
import.event.start.message=導入…
import.event.warning.build.target.not.found.message=目標 {0}: 找不到({1}, {2}, {3})的構建目標
import.event.warning.xcframework.slice.not.found.message=目標 {0}: 找不到({2}, {3})的 {1} 切片
import.event.finish.success.message=已完成
import.event.finish.failure.message=已失敗
import.event.finish.skipped.message=已跳過
android.migration.notification.title=Kotlin Android 模塊遷移
android.migration.notification.suggest=該項目使用 Kotlin Android 插件。遷移到 Kotlin Multiplatform 插件，即可從 Kotlin Multiplatform Mobile 開發的所有功能中獲益。
android.migration.action.name=將項目從 Kotlin Android 遷移到 Kotlin Multiplatform
android.migration.command.name=從 Kotlin Android 遷移到 Kotlin Multiplatform
android.migration.not.possible.warning.notification.title=無法從 Kotlin Android 插件遷移
android.migration.not.possible.warning.notification.message=模塊 ''{0}'' 使用的是舊式 KMM 項目配置，無法自動更新。\n請考慮手動將 Kotlin Android 插件替換為 Kotlin MultiPlatform。
android.migration.action.module.name=將模塊 ''{0}'' 從 Kotlin Android 遷移到 Kotlin Multiplatform
android.migration.force.action.name=強制將項目從 Kotlin Android 遷移到 Kotlin Multiplatform。這可能會導致重新加載 Gradle 項目時出錯。
android.migration.force.action.module.name=強制將模塊 ''{0}'' 從 Kotlin Android 遷移到 Kotlin MultiPlatform。這可能會導致重新加載 Gradle 項目時出錯。
android.migration.title=將模塊 ''{0}'' 從 Kotlin Android 遷移到 Kotlin Multiplatform
android.migration.dialog.confirm.button.migrate=遷移
android.migration.dialog.confirm.text.intro=遷移後不會移動以下 ''{0}'' 模塊依賴項：
android.migration.dialog.confirm.text.explanation=使用這些依賴項的代碼可能會以紅色高亮顯示，但項目將正確編譯。
android.migration.dialog.confirm.text.question=繼續?
android.migration.step.create.sourceset.progress=創建 ''{0}'' 源集
android.migration.step.create.kotlin.config.progress=創建 Kotlin 配置
android.migration.step.delete.kotlin.options.progress=刪除 Kotlin 選項
android.migration.step.remove.unused.dependencies.progress=從主範圍中刪除遷移的依賴項
android.migration.step.clean.dependencies.progress=清除頂級依賴項
android.migration.step.replace.plugin.progress=替換插件
android.migration.step.add.kotlin.config.progress=添加 Kotlin 配置
android.migration.intention.action.name=遷移項目
android.migration.highlighting.pass.description=該項目使用 Kotlin Android 插件。遷移到 Kotlin Multiplatform 插件，即可從 Kotlin Multiplatform Mobile 開發的所有功能中獲益。
android.migration.highlighting.pass.tooltip=運行構建檔案的自動遷移，並開始在 Android 項目模塊中使用 Kotlin Multiplatform 插件。您將能夠使用 Android 模塊中的所有 AppCode 功能。
android.migration.highlighting.action.name=遷移
android.migration.kotlin.module.0.uses.kotlin.1.message=模塊 ''{0}'' 使用 Kotlin 插件版本 {1}。
android.migration.kotlin.modules.0.uses.kotlin.1.message=模塊 {0} 使用 Kotlin 插件版本 {1}。
android.migration.kotlin.plugin.suggest.update.to.0.message=請考慮手動將插件升級到版本 {0} 或更高版本，以避免在重新加載遷移的 Gradle 項目時可能出現的錯誤。
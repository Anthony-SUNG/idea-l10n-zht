options.indent.radio.block-specific.caption=特定於塊中的語言
options.indent.radio.block-specific.tooltip=<template>、<script> 和 <style> 塊中的縮進將根據所使用語言的代碼樣式設置進行設置。例如，<style lang='scss'> 將使用 SCSS 中設置的縮進
options.indent.radio.uniform.caption=整個文件中相同
options.indent.label.top-level.caption=縮進頂級標記的子級:

vue.create.single.file.component.action.text=Vue 組件
vue.create.single.file.component.action.description=創建 Vue 組件文件
vue.create.single.file.component.action.dialog.title=新建 {0}
vue.create.single.file.component.action.name=創建 {0} {1}

vue.documentation.vue=Vue
vue.documentation.section.library=庫:
# vue.documentation.section.* properties are used indirectly
# suppress inspection "UnusedProperty"
vue.documentation.section.argument=實參:
# suppress inspection "UnusedProperty"
vue.documentation.section.required=必填
# suppress inspection "UnusedProperty"
vue.documentation.section.pattern=模式:
# suppress inspection "UnusedProperty"
vue.documentation.section.default=預設:

# vue.documentation.type.* properties are used indirectly
# suppress inspection "UnusedProperty"
vue.documentation.type.functional.component=函數組件
# suppress inspection "UnusedProperty"
vue.documentation.type.component=組件
# suppress inspection "UnusedProperty"
vue.documentation.type.directive=指令
# suppress inspection "UnusedProperty"
vue.documentation.type.filter=過濾
# suppress inspection "UnusedProperty"
vue.documentation.type.component.method=組件方法
# suppress inspection "UnusedProperty"
vue.documentation.type.component.event=組件事件
# suppress inspection "UnusedProperty"
vue.documentation.type.slot=插槽
# suppress inspection "UnusedProperty"
vue.documentation.type.component.property=組件屬性
# suppress inspection "UnusedProperty"
vue.documentation.type.component.computed.property=組件計算屬性
# suppress inspection "UnusedProperty"
vue.documentation.type.component.data.property=組件數據屬性
# suppress inspection "UnusedProperty"
vue.documentation.type.directive.modifier=指令修飾符
# suppress inspection "UnusedProperty"
vue.documentation.type.directive.argument=指令實參


vue.formatting.spacing.within.interpolations=插值
vue.formatting.spacing.within.group=內部
vue.formatting.wrapping.interpolations=插值
vue.formatting.wrapping.new-line-after-start-delimiter=在 '{{' 后換行
vue.formatting.wrapping.new-line-before-end-delimiter='}}' 前新起一行

vue.inspection.group.name=Vue
vue.inspection.display.name.data.function=數據函數
vue.inspection.display.name.duplicate.tag=重複的模板/腳本標記
vue.inspection.message.attribute.does.not.accept.value={0} 不接受任何值
vue.inspection.message.data.property.should.be.function=數據屬性應是一個函數
vue.inspection.message.duplicate.tag=頂級標記 {0} 重複
vue.inspection.message.filter.function.with.no.args=篩選器函數應至少接受一個參數
vue.inspection.message.filter.invalid.number.of.arguments=篩選器參數數量無效，應為 {0} 個
vue.inspection.message.unresolved.filter=未解析的篩選器 {0}

vue.live.template.context.component=Vue 組件
vue.live.template.context.script.tag=Vue 腳本標記內容
vue.live.template.context.template=Vue 模板
vue.live.template.context.template.tag.element=Vue 模板標記元素
vue.live.template.context.top.level=Vue 頂級元素

vue.param.hints.show.names.for.filters=對於篩選器參數

vue.parser.message.expected.comma.or.end.of.expression=應為逗號或表達式結尾
vue.parser.message.expected.end.of.expression=應為表達式結尾
vue.parser.message.expected.identifier.or.string=應為標識符或字符串
vue.parser.message.expected.in.or.of=應為 'in' 或 'of'
vue.parser.message.expected.lparen.pipe.or.end.of.expression=應為 (, | 或表達式結尾
vue.parser.message.expected.pipe.or.end.of.expression=應為 | 或表達式結尾
vue.parser.message.statements.not.allowed=Vue 表達式中不允許使用語句
vue.parser.message.unterminated.interpolation=未終止的插值

vue.project.generator.name=Vue.js
vue.project.generator.description=使用 <a href='https://cli.vuejs.org'>Vue CLI</a> 創建新的 <a href='https://vuejs.org'>Vue.js</a> 項目。
vue.project.generator.presentable.package.name=Vue CLI(&C)
vue.project.generator.use.default.project.setup=使用預設項目設置(babel, eslint)(&D)

vue.quickfix.wrap.with.function.text=在函數中包裝數據對象
vue.quickfix.wrap.with.function.family=包裝對象

vue.search.scope.template.name=模板

vue.template.intention.extract.component=提取 Vue 組件
vue.template.intention.extract.component.family.name=提取 Vue 組件
vue.template.intention.extract.component.description=將 Vue.js 模板的所選部分提取到新的單文件組件，並通過 props 傳遞使用的數據和方法
vue.template.intention.extract.component.error.component.name=組件名稱無效: {0}
vue.template.intention.extract.component.error.component.exists=組件 {0} 已存在
vue.template.intention.extract.component.error.file.exists=文件 {0} 已存在
vue.template.intention.extract.component.continue=繼續編輯

vue.template.intention.v-model.expand.family.name=展開 v 模型
vue.template.intention.v-model.expand.command.name=展開 v 模型

nuxt.support.notification.title=Nuxt.js 支持
nuxt.support.notification.contents=為獲取更好的代碼補全建議，請向項目依賴項中添加 @nuxt/types

vuex.inspection.message.unresolved.action=無法解析 Vuex 操作 {0}
vuex.inspection.message.unresolved.getter=無法解析 Vuex getter {0}
vuex.inspection.message.unresolved.mutation=無法解析 Vuex 突變 {0}
vuex.inspection.message.unresolved.namespace=未知 Vuex 模塊命名空間 {0}
vuex.inspection.message.unresolved.state=無法解析 Vuex 狀態 {0}
vuex.inspection.message.unresolved.symbol=無法解析 Vuex 符號 {0}


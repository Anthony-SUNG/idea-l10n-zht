js.readme.description=此交互式課程將幫助您了解如何完成一些常見的任務，例如重構代碼或在項目中導航。\n\n此課程對 {0} 的新手非常有用。但如果您是一名經驗豐富的 {0} 用戶，並且希望檢查自己是否了解所有基本快捷鍵，也可以嘗試。
js.readme.usage.header=如何學習此課程
js.readme.feedback.header=分享反饋


js.editor.basics.module.name=編輯器基礎知識
js.editor.basics.module.description=掌握編輯器的要點 - 從最開始就編寫更好的代碼，並節省執行常見任務的時間。

js.editor.completion.title=代碼補全
js.editor.completion.choose.lookup=<ide/> 功能豐富，能幫助您編寫更好的代碼並提高工作效率。我們先從代碼補全開始。通過補全語言 API 和項目依賴項中的關鍵字和符號，它可以加快編碼速度。鍵入 {0}，然後按 {1} 自動補全 {2}。
js.editor.completion.choose.method=因此，代碼補全會隨著您鍵入而顯示上下文感知的建議。要添加其中一項建議，可以像剛才那樣使用 {0}，或按 {1} 替換現有項。現在，在 {3} 後面添加 {2}，然後鍵入 {4} 並通過 {0} 自動補全 {5} 方法。
js.editor.completion.parameter.info=將文本光標放入 {1} 中後，所得到的工具提示({0})有助於您快速查找方法和函數中的形參名稱。在某些情況下，您可能想要查看更詳細的文檔。現在按 {2}。
js.editor.completion.add.parameter=這樣便可以在 <ide/> 中查找 JavaScript 文檔。現在在 {1} 中添加 {0} 以繼續。
js.editor.completion.console.log.argument=最後補全 {0} 語句。將文本光標放在第 8 行的 {1} 內，並使用代碼補全功能添加 {2}。
js.editor.completion.next=本課程到此為止。要開始下一個課程，請點擊下面的按鈕或使用 {0}。

js.editor.code.editing.tips.and.tricks.title=代碼編輯技巧和竅門
js.editor.code.editing.reformat.start=我們來看一下有助於更快編輯代碼的提示和技巧。對於初學者，無需使用 <ide/> 手動修正代碼格式。使用 {0} 重新格式化代碼。
js.editor.code.editing.select.word=就是這樣! 現在看看如何快速選擇文件中的代碼段。按幾次 {0}，以完全選擇第二個 tr 元素(第 14-18 行)。
js.editor.code.editing.comment.delete.unselect.move.up.1=現在您已選擇了代碼，可以將其(取消)注釋掉({0})、刪除({1})或收縮選區({2})。
js.editor.code.editing.comment.delete.unselect.move.up.2=您可以做的另一件事是在文件中向上或向下移動這段代碼。使用 {0} 將其上移。
js.editor.code.editing.multi.caret.1=接下來是多文本光標編輯。同時在多個位置修改代碼時，可以使用這項功能節省時間。將文本光標放在第一個 {0} 標記內(第 10 行)。然後選擇同一 tr 元素內的所有 {1} 標記(第 10-12 行): 按六次 {2}，直至選擇所有必要的標記。
js.editor.code.editing.multi.caret.2=將 {0} 替換為 {1}，然後按 {2} 退出多文本光標模式。
js.editor.code.editing.duplicate.delete.comment=最後，快速嘗試最常見的行操作，例如複製行、刪除行或將其注釋掉。現在使用 {0} 複製所選行。然後按 {1} 和 {2} 嘗試其他行操作。
js.editor.code.editing.next=本課到此為止。點擊下面的按鈕開始下一課或使用 {0}。

js.editor.code.inspection.title=代碼檢查的作用
js.editor.code.inspection.intro=在編輯器中工作時，<ide/> 會不斷分析您的代碼，檢測其中的各種問題，並提出如何對其進行改進的建議。在打開的文件中，第 4 行和第 5 行有兩個高亮顯示的問題。按一下 {0}，來看看是什麼問題。
js.editor.code.inspection.show.intentions.1=您還可以使用 {0} 從一個錯誤跳轉到另一個錯誤。也可以將鼠標懸停在發現的問題上來了解這些問題。
js.editor.code.inspection.show.intentions.2=在此文件中，IDE 找到了一個未解析的變量 - 該變量未在代碼中的任何位置定義。它建議創建一個新變量 {0} 作為一種可能的修正，但我們需要添加一個參數 book。將文本光標插入 {1}，然後按 {2} 查看完整的修正列表。
js.editor.code.inspection.run.intention=選擇 {0} 並按 {1}。
js.editor.code.inspection.checkmark=現在查看編輯器的右上角，會看到用於確認該文件並無其他問題的綠色復選標記({0})。即便如此，仍可以對一些細節進行優化以縮短代碼。將文本光標插入 {1}(第 3 行)，然後按 {2}。
js.editor.code.inspection.make.shorter=現在我們要縮短函數表達式。選擇 {0} 快速修復，然後按 {1}。
js.editor.code.inspection.next=本課到此為止。點擊下面的按鈕開始下一課或使用 {0}。

js.editor.navigation.title=高效導航
js.editor.navigation.recent.files=我們從導航項目開始。按 {0} 調出 {1} 彈出視窗。
js.editor.navigation.choose.structure=通過該彈出視窗，可以在最近的文件和 IDE 工具視窗之間快速跳轉。其中的一個工具視窗可以幫助您導航項目中的一小部分(即單個文件)。點擊 {0} 選項卡了解更多信息。
js.editor.navigation.activate.structure=因此，{0} 工具視窗可以幫助您更快速地檢查文件。它提供文件結構概述，您只需鍵入名稱即可跳轉到特定項。在工具視窗區域中的任意位置開始鍵入 {1}，按 {2}，然後按 {3} 以關閉面板，並跳轉到代碼處。
js.editor.navigation.find.usages=在執行這些操作後，文本光標已移至 {0}(第 9 行)。我們將其保留在此處，然後按 {1} 打開另一個工具視窗，它可以幫您快速查找任何項的用法。
js.editor.navigation.hide.tool.window=太好了! 現在您可以看到 giveTreat 在整個項目和庫中的用法。使用 {0} 關閉工具視窗。
js.editor.navigation.search.everywhere=現在，按兩下 {0}，了解另一項能幫您加快搜索的功能。
js.editor.navigation.search.everywhere.tabs=這是 {0} 彈出視窗。從中可以立即查找任何操作、文件、類或符號，並在一個位置顯示所有匹配項。如果要執行更具體的搜索，可以按 {1} 從 {2} 切換到其他任何選項卡，例如 {3} 或 {4}。您也可以使用快捷鍵打開所需的特定選項卡。我們來通過 {5} 嘗試進行後面這種操作。
js.editor.navigation.search.action=現在我們位於 {0} 選項卡中，先在搜索欄中鍵入 {1}，來查找另一項實用導航功能的快捷鍵。
js.editor.navigation.go.to.declaration=請注意<strong>轉到聲明或用法</strong>旁邊的 {0} - 它會顯示定義的用法(反之亦然)。關閉彈出視窗，將文本光標置於 {1} (第 16 行)上，然後按 {0} 查找其聲明。
js.editor.navigation.keymap.reference=恭喜! 您已經完成 {0} 的操作。列印出<a href="{1}">鍵盤映射參考</a>，以便您在 <ide/> 中得心應手地使用所有快捷鍵。點擊下方按鈕移至下一個模塊。

js.editor.refactorings.title=簡單的重構
js.editor.refactorings.this=<ide/> 提供<a href=''{0}''>多種重構</a>來自動重構現有代碼，無需在整個項目中更改其行為。來預覽一下 {1} 參數可用的重構列表。按 {2} 或從主菜單中選擇 {3}。
js.editor.refactorings.rename=借助 {0}，您無需記住所有重構或其快捷鍵。點擊 {1} 查看最常用的一種重構操作。
js.editor.refactorings.rename.apply=將 {0} 形參重命名為 {1} 並按 {2}。此操作將針對項目中的所有文件應用變更。
js.editor.refactorings.shortcut=太棒了! 我們來嘗試通過快捷鍵重構代碼。將文本光標插入 {0} 屬性(第 4 行)，然後按 {1}。
js.editor.refactoring.replace=現在將這 2 個匹配項都替換成名稱為 {1} 的 {0} 變量。
js.editor.refactoring.select.expression=我們來創建一個新變量 {0}，該變量包含 {1}。從列表中選擇 {1} 表達式，然後按 {2}。
js.editor.refactorings.next=您剛剛了解了在 <ide/> 中重構代碼的兩種方法。如果您更喜歡使用快捷鍵，請將<a href="{0}">鍵映射參考</a>列印出來，或者繼續使用 {1} 菜單。點擊下方按鈕開始下一課或使用 {2}。

js.getting.started.module.name=測試入門
js.getting.started.module.description=使用 Jest 的示例了解如何簡化 {0} 中的單元測試。

js.testing.jest.title={0} 測試的基礎知識
js.testing.jest.prepare=使用 <ide/> 可以讓所有測試工作流變得更簡單。來了解一下具體的過程。對於此模塊，我們將以 <a href="{0}">Jest</a> 和一個<a href="{1}">示例項目</a>為例，因此請確保計算機上安裝了 Jest 和 npm/Yarn(有關詳細信息，請參閱<a href="{2}">此</a>網頁)。先創建一項特定於 Jest 的運行/調試配置。在主菜單上，選擇 {3} > {4}。然後點擊 {5}，使用默認形參添加 {6} 配置，然後按 {7} 進行保存。
js.testing.jest.run=現在默認為選擇了新的 {0} 配置。點擊它旁邊的 {1}({2})按鈕。
js.testing.jest.navigate.1=現在可以看到 {0} 工具視窗，其中包含測試結果以及測試運行程序中失敗測試的堆棧跟踪。除了跟踪測試進度之外，在這裡還可以執行許多其他操作。您可以重新運行所有({1})測試，或僅運行失敗的({2})測試，查看通過的測試({3})，或啟用<a href="{4}">監視模式</a>，以便在發生變更時自動重新運行測試。
js.testing.jest.navigate.2=您還可以在 {0} 中快速查找特定的測試。現在嘗試執行這項操作: 將文本光標放在 {0} 區域的任意位置，鍵入 {1}，然後按 {2} 跳轉到測試。
js.testing.jest.double.click=就是這樣! 當您需要在許多測試中快速查找特定一個時，請使用這項功能。現在雙擊我們找到的 {0}。
js.testing.jest.fix.test.1=通過雙擊 {0} 中的測試，我們直接跳轉到了它在代碼中的位置。如果現在將鼠標懸停在 {1} 上，會看到一個彈出視窗，其中說明了測試失敗的原因。如果需要，可以從這裡調試測試。
js.testing.jest.fix.test.2=現在替換用於 {0} 的不正確的值: 在第 6 行，將 {1} 替換為 {2}。
js.testing.jest.re.run.test.1=我們已得到符合預期結果的正確值，可以重新運行測試了。這次以不同的方式來執行。在編輯器中看到測試左側的 {0} 圖標了嗎? 此圖標不僅可以顯示最近運行的測試的測試狀態，還可以供您快速運行和調試特定測試。
js.testing.jest.re.run.test.2=點擊它並選擇 {0}。
js.testing.jest.success.run.coverage.1=很好! 我們已成功通過測試。
js.testing.jest.success.run.coverage.2=來看看另一種方便的工具。點擊運行/調試配置菜單旁邊的 {0} 圖標。
js.testing.jest.coverage.result=這樣可以快速生成代碼覆蓋率報告，這一報告會顯示測試覆蓋的文件數目，包括覆蓋這些文件中的行數百分比。現在使用 {0} 關閉覆蓋率報告。
js.testing.jest.end=恭喜您! 您已完成本模塊。我們學到的大多數內容也適用於 <ide/> 支持的其他測試運行程序(代碼覆蓋率和監視模式除外)。有關使用 Jest 測試應用的更多提示和技巧，請閱讀<a href="{0}">這篇</a>博文。如果您使用其他測試運行程序，可能需要瀏覽我們的 <a href="{1}">Web 幫助</a>。

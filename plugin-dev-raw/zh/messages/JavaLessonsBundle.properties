
java.basic.completion.choose.first=您可以按 {0} 選擇尋找選單中的第一項。
java.basic.completion.activate=要啟用“基本補全”，請按 {0}，您會再次看到尋找選單。
java.basic.completion.choose.item=在尋找選單中選擇 {0}，然後按 {1}。
java.basic.completion.complete=按 {0} 補全此語句。
java.basic.completion.deeper.level=有時您需要查看有關靜態常數或方法的建議。按兩下 {0} 以在尋找中獲取。
java.basic.completion.module.promotion=您將在 {0} 模組中找到有關重構的更多資訊。

java.run.configuration.lets.run=通過 {0} 標記的任何程式碼均可執行。使用 {1} 執行簡單範例。您也可以點擊 {0} 並選擇 {2} 項。

java.postfix.completion.type=在圓括號後面鍵入 {0}，以查看後綴補全建議列表。
java.postfix.completion.complete=從列表中選擇 {0} 或在編輯器中鍵入相同的值。按 {1} 補全語句。

java.smart.type.completion.apply=智能類型補全可以篩選建議列表，以使其僅包含當前上下文中適用的類型。按 {0} 查看符合建議的列表。按 {1} 選擇第一項。
java.smart.type.completion.return=智能類型補全還可以為 return 語句提供程式碼建議。按 {0} 查看 return 的尋找選單。按 {1} 選擇第一項

java.statement.completion.lesson.name=語句補全
java.statement.completion.complete.for=按 {0} 補全 {1} 語句。
java.statement.completion.complete.if=鍵入 {0}，然後按 {1} 以生成語句。
java.statement.completion.complete.condition=在括號 {0} 內添加一個條件，然後按 {1} 跳轉到 {2} 語句內。
java.statement.completion.complete.finish.body=鍵入一行程式碼: {0}，然後按 {1} 補全語句並套用格式。

java.rename.press.rename=按 {0} 重命名欄位 {1}。
java.rename.type.new.name=鍵入該欄位的新名稱(例如 {0})，然後按 {1}。
java.rename.confirm.accessors.rename=<ide/> 正在檢測相應的 getter/setter，並提出相應的重命名建議。現在只需按 {0} 或點擊 {1}

# Next string does not require translation
java.refactoring.menu.inline.variable.eng=現在，將 {0} 變數的單一用法取代為定義該變數的表達式。您可以按 {1} 並通過 <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable) 篩選重構選單。選擇此項或按 {2}。
java.refactoring.menu.inline.variable=現在，將 {0} 變數的單一用法取代為定義該變數的表達式。您可以按 {1} 並從列表中選擇 {2}，或按 {3} 直接調用此操作。
# Next string does not require translation
java.refactoring.menu.introduce.constant.eng=最後，我們從文件名提取擴展。同樣，您可以按 {0}，然後通過 <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant) 進行篩選或按 {1}。
java.refactoring.menu.introduce.constant=最後，從文件名中提取副檔名。您可以再次按 {0} 並選擇 {1} 或按 {2}
java.refactoring.menu.confirm.constant=在此對話框中，您可以選擇新常數的類型、名稱、父類和可見性。您可以保留預設值，然後按 {0} 或點擊 {1}。

java.editor.coding.assistance.press.to.fix=按 {0} 將參數取代為空陣列。

java.extract.method.edit.method.name=編輯新方法的名稱或保留 IDE 建議的方法。然後按 {0}。

java.inheritance.hierarchy.lesson.name=繼承層次結構
java.inheritance.hierarchy.goto.implementation=按 {0} 尋找 {1} 的實作。
java.inheritance.hierarchy.choose.any.implementation=選擇任何實作，然後按 {0} 或點擊它。
java.inheritance.hierarchy.navigate.to.base=您可以從派生導航到 super 方法。按 {0} 或點擊編輯器間距中的 {1} 圖標。
java.inheritance.hierarchy.invoke.implementations.again=基方法的宣告具有自身的間距圖標 {0}。點擊它或再次按 {1}。
java.inheritance.hierarchy.open.in.find.tool.window=對於大型層次結構，您可能想要在 {0} 工具視窗中尋找實作。點擊 {1}。
java.inheritance.hierarchy.hide.find.tool.window=按 {0} 隱藏 {1} 工具視窗。
java.inheritance.hierarchy.open.method.hierarchy=您可能想要探索這種方法的整個層次結構。按 {0}。
java.inheritance.hierarchy.hide.method.hierarchy=我們(也)隱藏 {0}。再次按 {1}。
java.inheritance.hierarchy.open.class.hierarchy=要查看類層次結構，請按 {0}。
java.inheritance.hierarchy.last.note=<strong>注意:</strong> 也可以對類執行 {0} 和 {1} 操作。{2} 和 {3} 操作可能很少使用，但您始終可以使用 {5} 篩選器通過 {4} 找到它們。

java.find.occurrences.lesson.name=下一個/上一個符合項
java.find.occurrences.invoke.find=在本課程中，您選擇了 {0}。按 {1} 開始在當前檔案中執行全文搜尋。
java.find.occurrences.find.previous=要跳轉到上一個符合項，請按 {0}。
java.find.occurrences.search.closed.warning=按 {0} 再次開啟搜尋欄位。
java.find.occurrences.find.next=<ide/> 自動將所選文本複製到搜尋欄位中。我們來尋找下一個符合項。按 {0} 或 {1}。
java.find.occurrences.close.search.tool=在關閉搜尋面板的情況下，仍然可以使用這些快捷鍵在最近找到的符合項之間導航。按 {0} 關閉搜尋面板。
java.find.occurrences.find.next.in.editor=使用 {0} 尋找下一個符合項。
java.find.occurrences.find.previous.in.editor=並按 {0} 返回。
java.find.occurrences.note.about.cyclic=<strong>注意</strong>: 搜尋將迴圈進行。在最後的符合項處按兩下 {0} 時，將選擇第一個符合項。{1}也迴圈進行。

java.debug.workflow.hotswap.disabled.warning=<strong>熱交換</strong>功能在 IDE 設定中已禁用。在“{0} | {1} | {2}”<strong>→</strong>“{3}”中啟用，或<callback id="{4}">點擊以啟用</callback>。
java.debug.workflow.rebuild=對於大型程序，重新執行可能要花很長時間。如果您發現純方法中存在錯誤，可以重新建置專案並套用<strong>熱交換</strong> JVM 功能。我們來建置專案: {0} 或 {1}。
java.debug.workflow.confirm.hot.swap=確認<strong>熱交換</strong>取代。
java.debug.workflow.no.confirmation=<strong>熱交換</strong>在背景自動完成。您可能會在左下角可以看到相應的訊息。
java.debug.workflow.drop.frame=We patched our method, but right now we are still executing obsolete {0}, and it will throw the exception again. Let''s drop the frame and return to the state before the {1} call. Click {2} near the top method in the stack frame or press {3}.

java.statement.completion.help.link=語句補全
java.inheritance.hierarchy.help.link=原始碼層次結構
java.find.help.link=在檔案中搜尋目標
toggle.case.part=大小寫
java.onboarding.module.name=入門導覽
java.onboarding.module.description={0} 中的主要功能概覽。
java.onboarding.lesson.name=Get Acquainted with IDEA
java.onboarding.change.ui.settings=For this lesson, IDEA changes some UI settings to the default state. Your preferences will be restored when you complete or exit the lesson.
java.onboarding.project.view.description=The <strong>Project view</strong> is one of the main tool windows. It contains the project directory, SDK-specific external libraries, and scratch files. Click the striped button to preview the demo project content. You can also open it by pressing {0}.
java.onboarding.balloon.project.view=點擊以開啟<strong>專案檢視</strong>
java.onboarding.balloon.source.directory=Expand the {0} directory to view the project source files
java.onboarding.balloon.open.file=雙擊以開啟 {0}
java.onboarding.balloon.open.learn.toolbar=切換到“{0}”工具視窗繼續學習本課
java.onboarding.indexing.description=When you open a project for the first time, <ide/> scans the JDK and the project itself to collect details required for coding assistance. To continue, wait until indexing completes.
java.onboarding.context.menu=You have opened the demo, now let's run it. Click one of the highlighted gutter icons to invoke the context menu.
java.onboarding.run.sample=選擇 {0} 或嘗試 {1}。
java.onboarding.temporary.configuration.description=<ide/> 剛剛創建了一個臨時執行設定。您可以在“執行”工具欄中找到此設定。使用此工具欄，您可以為所選設定執行常用的執行操作，例如執行 {0}、偵錯 {1}、分析程式碼 {2} 以及執行程式碼覆蓋率 {3}。
java.onboarding.balloon.click.here=點擊此處設定中斷點
java.onboarding.toggle.breakpoint.1=您可能會注意到 {1} 方法沒有返回預期值 {0}，而是返回 {2}。我們來查看 return 語句，偵錯有問題的程式碼。
java.onboarding.toggle.breakpoint.2=Click the gutter within the highlighted area to set a breakpoint.
java.onboarding.balloon.start.debugging=點擊該圖標以開始偵錯
java.onboarding.start.debugging=點擊 {0} 圖標啟動偵錯過程。
java.onboarding.balloon.about.debug.panel={0} 工具視窗為{1,choice,0#工具欄|1#工具欄}提供了各種偵錯操作。您可以稍後在 {2} 課程中進行嘗試。
java.onboarding.balloon.stop.debugging=點擊該圖標以停止偵錯
java.onboarding.stop.debugging=停止偵錯。點擊 {0} 圖標。
java.onboarding.type.division=Once you have discovered the problem in the code, let''s fix it. Divide the resulting sum by the length of the values. The lesson script inserts {0} already.
java.onboarding.invoke.completion=Now let's type a dot to show all available completion options.
java.onboarding.choose.values.item=Now you can start typing {0} to reduce the completion list or select this item and press {1}.
java.onboarding.invoke.completion.tip=<strong>Tip</strong>: <ide/> shows completion options automatically as you type. Also, you can press {0} to show completion items in any place of the code.
java.onboarding.invoke.intention.for.warning.1=You have just fixed a bug, but you can make this code look even better. IDEA highlights and adds a yellow bulb to the code lines that can be improved.
java.onboarding.invoke.intention.for.warning.2=按 {0} 預覽警告並套用快速修復。
java.onboarding.select.fix=Apply the first item: {0}. In this case, the <strong>for-each</strong> loop will make code easier to understand.
java.onboarding.invoke.intention.for.code=Intentions also save your time and make coding easier. Let''s use an intention to reformat string concatenation. Press {0} to show possible options.
java.onboarding.apply.intention=選擇 {0} 並按 {1}。
java.onboarding.invoke.search.everywhere.1=While working in <ide/>, you might want to search for files in your project, symbols, classes, or even IDE actions. In this lesson, let''s search for the {0} action to make the {1} string low-case.
java.onboarding.invoke.search.everywhere.2=按兩次 {0} 以開啟“{1}”對話框。
java.onboarding.search.everywhere.description=可以看到，所選文本 {0} 已被自動複製到輸入字串中。我們不鍵入 {0}，而是鍵入 {1}。
java.onboarding.apply.action=選擇“{0}”操作，然後按 {1}。
java.onboarding.case.changed=大小寫已更改。
java.onboarding.epilog=恭喜! 您已完成入門導覽。此時，您可以:\n\
  - <callback id="{0}">關閉</callback>學習專案{1}\n\
  - <callback id="{2}">顯示</callback>更多教程
java.onboarding.finish.title=恭喜
java.onboarding.finish.text=You have just completed the IDEA Onboarding tour.\n\
Now you can close the Learning project{0}.\n\
You can also continue your study and try other lessons.
java.onboarding.finish.exit=關閉示範專案
java.onboarding.finish.modules=顯示更多課目
java.onboarding.feedback.system.found.jdks=Found JDKs:
java.onboarding.feedback.system.current.jdk=Current JDK:
java.onboarding.feedback.system.lang.level=語言級別:
java.debug.workflow.invalid.drop=Oops, it seems that you performed an action that was not planned by the lesson. Please, restart the lesson.
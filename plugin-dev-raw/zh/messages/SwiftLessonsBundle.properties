swift.editor.module.name=編輯器
swift.editor.module.description=了解如何選擇、註釋、刪除、複製和移動行，以及如何設定代碼格式等等。
swift.code.generations.module.name=代碼生成
swift.code.generations.module.description=從用法創建、重寫/實現並應用快速修復。
swift.navigation.module.name=導航
swift.navigation.module.description=視窗、視圖、代碼導航、跳轉到原始碼、聲明/實現、檔案結構等。
swift.refactorings.module.name=重構
swift.refactorings.module.description=重命名、提取變量/方法和其他重構。
swift.run.debug.test.module.name=運行、調試、測試
swift.run.debug.test.module.description=了解如何運行、調試和測試您的應用程序。

swift.codegeneration.cfu.name=從用法創建
swift.codegeneration.cfu.create.local=在 <ide/> 中，對未解析實體按 {0}，即可根據其用法創建各種代碼結構。按 {1}，選擇<strong>創建局部變量 ''label''</strong>，然後按 {2}。
swift.codegeneration.cfu.repeat=重複相同的操作以創建 {0} 函數。
swift.codegeneration.cfu.nice=不錯! 注意形參及形參名稱的生成方式。
swift.codegeneration.cfu.create.class=這次我們可以使用相同的方法來創建類聲明。按 {0}，然後選擇<strong>創建類型 ''IDE''</strong>。請注意，您可以自動創建它以使其嵌套在當前類或新檔案中。
swift.codegeneration.cfu.create.init=很好! 我們來重複執行相同的操作，為 {0} 類生成初始值設定項。按 {1}，選擇<strong>創建初始值設定項</strong>，然後按 {2}。
swift.codegeneration.cfu.create.empty.init=最後，使用相同的操作添加一個空的初始值設定項。
swift.codegeneration.generate.name=生成
swift.codegeneration.generate.intro=您可以使用<strong>生成</strong>操作來生成 {0}、{1}、{2}、{3} 屬性以及初始值設定項。
swift.codegeneration.generate.init=按 {0}，然後在<strong>生成</strong>彈出視窗中選擇<strong>初始值設定項</strong>。選擇要包含在初始值設定項簽名中的屬性，然後按 {1}。
swift.codegeneration.generate.hash=使用 {2} → <strong>equals 和 hash</strong> 來生成 {0} 和 {1}。
swift.codegeneration.generate.description=最後，使用 {1} →<strong>描述</strong>操作生成 {0}。
swift.codegeneration.overrideimplement.name=重寫/實現
swift.codegeneration.overrideimplement.intro=您可以使用<strong>重寫/實現</strong>操作({0}/{1})重寫父類的任何方法或實現任何協議。
swift.codegeneration.overrideimplement.implement=按 {0} → {1}，然後為 {2} 中所有必需的方法添加存根。
swift.codegeneration.overrideimplement.override=現在我們嘗試一次重寫幾種方法。按 {0}，然後開始鍵入 {1}。您可以重寫的方法和屬性列表應篩選為僅兩種方法。按 {2} → {3} 重寫它們。
swift.codegeneration.quickfix.name=快速修復和意圖
swift.codegeneration.quickfix.intro=<ide/> 為您的 Swift 代碼顯示與 Xcode 相同的 {0}。
swift.codegeneration.quickfix.fixit=按 {0}，然後選擇<strong>應用 Fix-it</strong>，將未使用的變量替換為 {1}。
swift.codegeneration.quickfix.sourcekit.inspection=AppCode 還將 SourceKit 作為一種單獨的檢查進行集成。這意味著您可以在整個檔案中運行它，並在可以進行多種修正時一併修正所有問題。按 {0}。
swift.codegeneration.quickfix.sourcekit.fixit=正如您看到的，這段代碼中存在幾個問題。我們來修正其中一些問題。選擇<strong> Swift→SourceKit 檢查</strong>，然後點擊右側的<strong>應用 Fix-it</strong> 按鈕。此操作會解決該組中的所有問題。
swift.codegeneration.quickfix.typo.in.var=現在，按 {0} 返回編輯器視窗，將文本光標插入拼寫錯誤的變量名稱處，然後按 {1}。選擇<strong>拼寫錯誤: 重命名為…</strong>，選擇正確的選項，然後按 {2}。
swift.codegeneration.quickfix.typo.in.string=請注意，只更正了必要的部分，並自動重命名了所有變量用法。現在重複執行兩次相同的操作來修正 {0} 字符串。
swift.codegeneration.quickfix.go.next.error=按 {0} 轉到下一個錯誤。
swift.codegeneration.quickfix.error.handling=錯誤處理意圖讓您能夠在需要之處添加 {0}。按 {1} → {2} 並選擇一種快速修復。
swift.codegeneration.quickfix.go.next.warning=按 {0} 轉到下一個警告。
swift.codegeneration.quickfix.redundant=您也可以移除冗餘的 {0} 特性。按 <shortcut>⇧⌥⏎</shortcut>。
swift.codegeneration.quickfix.explicit.type=如果要添加或移除某些變量的顯式類型，只需按 {0}，然後選擇<strong>添加/移除顯式類型</strong>。現在試著對 {1} 變量執行操作。
swift.editor.format.name=代碼格式化
swift.editor.format.reformat=<ide/> 可以幫助您只通過一項操作更正代碼格式設定。使用 {0} 重新格式化所選代碼。
swift.editor.format.reformat.whole.file=要重新格式化整個源文件，請在未選擇任何行的情況下使用 {0}。按 {1}，然後按 {2}。
swift.editor.comment=註釋
swift.editor.comment.intro=使用 {0} 註釋掉任意一行。
swift.editor.comment.uncomment=撤消對使用相同快捷鍵 {0} 註釋過的行的註釋。
swift.editor.comment.several.lines=通過 {0} 選擇幾行，然後用 {1} 進行註釋。
swift.editor.comment.block=按 {0} 兩下以選擇 {1}，然後使用 {2} 以塊註釋的形式對其進行註釋。
swift.editor.completion.name=補全
swift.editor.completion.basic=預設情況下，<ide/> 會立即補全代碼。在文本光標所在處開始鍵入 {0}，然後按 {1} 以選擇 {2} 函數。
swift.editor.completion.basic.shortcut=您可以隨時按 {0} 激活基本補全。
swift.editor.completion.smart=智能類型補全可以篩選建議列表，以使其僅包含當前上下文中適用的類型。按 {0} 以查看匹配建議的列表。按 {1} 選擇第一個。
swift.editor.completion.show=現在再次按 {0} 顯示補全選項。
swift.editor.completion.tab=選擇 {0} 條目，然後按 {1}(而不是 {2})。此操作將覆蓋文本光標處的單詞，而不是簡單地插入而已。
swift.editor.completion.tab.method=現在調用 {0} 和 {1}，輕鬆使用 {3} 覆蓋 {2}。
swift.editor.completion.go.next=太棒了! 點擊下面的按鈕開始下一課或使用 {0}。
swift.editor.delete.name=刪除
swift.editor.delete.action=通過 {0} 刪除當前行。
swift.editor.delete.undo=要恢復已刪除的行，請按 {0}。
swift.editor.duplicate.name=複製
swift.editor.duplicate.line=通過 {0} 複製任何行。
swift.editor.duplicate.several.lines=您可以對多行執行同一操作。選擇兩行或更多行，然後通過 {0} 進行複製。
swift.editor.folding.name=折疊
swift.editor.folding.collapse=有時您需要收起一段代碼以提高可讀性。嘗試通過 {0} 收起代碼。
swift.editor.folding.expand=要展開代碼區域，請按 {0}。
swift.editor.folding.collapse.all=如果要收起檔案中的所有區域，請使用 {0}。
swift.editor.folding.expand.all=同樣，按 {0} 展開所有可用區域。
swift.editor.folding.collapse.statement.any=在 <ide/> 中，有一種方法可以折疊任何順序的語句或聲明。嘗試使用 {0} 折疊所選區域。
swift.editor.folding.expand.statement=現在，按 {0} 展開語句。
swift.editor.folding.block=最後使用 {0} 折疊控制流語句。
swift.editor.move.name=移動
swift.editor.move.line.down=重新排列行通常涉及兩項操作: 剪下和貼上。但在 <ide/> 中只需執行一項操作，因為按 {0} 將下移當前行。將當前行移至 {1} 函數的末尾。
swift.editor.move.line.up=同樣，要向上拉取一行，請使用 {0}。移動 {1} 聲明使之位於設定前面。
swift.editor.selections.name=多選
swift.editor.selections.next=按 {0} 以選擇文本光標處的符號。
swift.editor.selections.next.again=再次按 {0} 以選擇該符號的下一個匹配項。
swift.editor.selections.unselect=按 {0} 取消選擇上一個匹配項。
swift.editor.selections.select.all=按 {0} 以選擇檔案中的所有匹配項。
swift.editor.selections.replace=鍵入 {0}，將 {1} 的所有匹配項替換為 {2}，然後按 {3}。
swift.editor.selections.column=使用 {0} 切換列選區，然後使用鍵盤選擇 {1} 到 {2} 之間的所有行。
swift.editor.selections.select.sample=現在，鍵入 {0} 並選擇所有包含 {1} 的用例名稱。
swift.editor.selections.select.sample.toggle=按 {0} 切換用例，然後再次按 {1} 退出列選區模式。
swift.editor.selections.reformat=按 {0}，使用 {1} 重新格式化代碼就可以了!
swift.editor.popups.name=快速彈出視窗
swift.editor.popups.param.info=按 {0} 可查看初始值設定項簽名。
swift.editor.popups.close.param.info=按 {0} 可關閉彈出視窗。
swift.editor.popups.doc=按 {0} 可查看文本光標處符號的文檔。
swift.editor.popups.impl=按 {0} 可查看文本光標處符號的定義。
swift.editor.selection.name=選區
swift.editor.selection.word=將文本光標放在任何單詞前面。按 {0} 將文本光標移至下一個單詞，然後選擇二者之間的所有內容。
swift.editor.selection.expand=按 {0} 將選區擴展到下一個代碼塊。
swift.editor.selection.expand.more=嘗試使用 {0} 增大選區，直至選擇整個檔案。
swift.editor.selection.shrink={0} 可縮小當前選區。嘗試按此按鈕。
swift.editor.selection.all=現在使用 {0} 立即選擇整個檔案。
swift.navigation.code.name=代碼導航
swift.navigation.code.intro=在處理項目時，通常需要打開和編輯特定的類、檔案或符號。最快捷的方法是使用主導航三元組: <strong>轉到類/檔案/符號 </strong>。
swift.navigation.code.class=我們來導航到 {0} 類。按 {1}，鍵入 {2}，然後按 {3}。
swift.navigation.code.fuzzy=每個 <strong>轉到…</strong> 對話框都支援使用模糊匹配，因此可以只鍵入類、檔案或符號名稱的一部分便可找到它。
swift.navigation.code.file=很好! 現在打開 {0} 檔案: 按 {1}，鍵入 {2}，然後按 {3}。
swift.navigation.code.symbol=直接跳轉到 {1} 類中的 {0} 聲明。按 {2}，鍵入 {3}，然後按 {4}。
swift.navigation.code.non.project.files=如果還需要包括標準庫和其他非項目檔案、符號或類，只需雙擊快捷鍵。
swift.navigation.code.declaration=<strong>轉到…</strong> 系列的另一項重要操作是<strong>轉到聲明</strong>。將文本光標插入 {0} 處，然後按 {1} 跳轉至其聲明。
swift.navigation.code.implementation=如果一個方法或類具有多個實現，{0} 將讓您進入第一個。嘗試使用 {1} 查看 {2} 的所有定義。
swift.navigation.code.go.back=我們來通過 {1} 導航回到 {0}。
swift.navigation.code.super=<strong>轉到父定義</strong>會將您導航到父類聲明。按 {0} 跳轉到 {1} 類。
swift.navigation.code.super.again=現在再次按 {0} 跳轉到 {1} 協議聲明。
swift.navigation.code.recent=最後，有兩種非常有用並且經常使用的導航操作，可以幫助您在最近的檔案和工具視窗之間快速切換。首先是<strong>最近的檔案</strong>彈出視窗。通過 {0} 將其打開，然後使用鍵盤上的箭頭鍵選擇所需的內容。
swift.navigation.code.switcher=第二個是<strong>切換器</strong>，它看上去並無不同，但在選擇某些內容後會立即消失。在按住 <shortcut>⌃</shortcut> 鍵的同時按 {0}，然後再按一次切換到某個檔案或工具視窗。選擇所需內容後，鬆開 <shortcut>⌃</shortcut> 鍵。
swift.navigation.windows.name=主視窗與視圖
swift.navigation.windows.intro=<ide/> 中有許許多多的導航視圖。了解在特定情況下要調用哪種視圖可以更有效地使用 IDE。
swift.navigation.windows.project=<strong>項目</strong>視圖類似於 Xcode 中的項目導航器。它顯示特定工作區中包括的所有項目，以及其中的所有檔案和組。按 ({0}) 打開<strong>項目</strong>視圖。
swift.navigation.windows.project2=預設情況下，<ide/> 中的<strong>項目</strong>視圖按照檔案和資料夾在檔案系統中的存儲順序來顯示檔案和資料夾。
swift.navigation.windows.project.settings=點擊項目視圖選項選單中的 {0} 圖標，然後選擇 <strong>Xcode 順序</strong>，設定與 Xcode 中相同的檔案順序(如果在設定 <ide/> 時選擇了 Xcode 行為，則自動啟用此選項)。
swift.navigation.windows.project.settings.more=其他功能包括<strong>一鍵打開檔案</strong>和<strong>始終選擇打開的檔案</strong>。通過<strong>一鍵打開檔案</strong>，可以在選擇檔案時自動打開檔案的代碼。通過<strong>始終選擇打開的檔案</strong>，可在編輯器區域處於聚焦狀態時，自動將聚焦點設定在<strong>項目</strong>視圖中的文件名上。
swift.navigation.windows.files=<strong>檔案</strong>視圖是 <ide/> <strong>項目</strong>視圖的另一種有用模式。它顯示 {0} 或 {1} 所在目錄中的所有檔案。使用此視圖可以輕鬆打開項目中未包含的任何檔案並進行查看。
swift.navigation.windows.files.activate=按 {0} 激活<strong>檔案</strong>視圖。
swift.navigation.windows.return.to.editor=按 {0} 返回編輯器視窗。
swift.navigation.windows.structure=<strong>結構</strong>視圖和<strong>結構</strong>彈出視窗顯示特定檔案的結構以及代碼中的所有 {0}、{1} 和 {2} 或 {3} 註釋。它們的作用方式類似於 Xcode 中的<strong>符號</strong>導航器。
swift.navigation.windows.structure.activate=按 {0} 激活<strong>結構</strong>視圖。
swift.navigation.windows.jump.to.source=使用 ↑ 和 ↓ 鍵選擇此處的任何代碼結構，然後按 {0} 跳轉到代碼中的某處。
swift.navigation.windows.structure.popup=現在通過 {0} 激活<strong>結構</strong>彈出視窗。
swift.navigation.windows.dismiss.structure.popup=使用 {0} 關閉此彈出視窗，或按 ⏎ 跳轉到代碼中的某處。
swift.navigation.windows.find=<strong>在檔案中尋找</strong>({0})對話框提供的功能與 Xcode 中的<strong>尋找</strong>導航器提供的功能相同。立即試用這項功能來執行全文搜尋。
swift.navigation.windows.build=調用 {0} 以構建項目。
swift.navigation.windows.build.messages=<strong>構建消息</strong>工具視窗顯示編譯器輸出，從中可以按類型篩選構建消息(參見左側的<strong>篩選消息</strong>({0})按鈕)。
swift.navigation.windows.run=現在在模擬器上運行我們的項目，查看<strong>運行</strong>工具視窗。按 {0}。
swift.navigation.windows.run.window=該工具視窗顯示控制台，從中可以查看應用程序的輸出，如果運行的是<strong>測試</strong>運行配置，則可以查看<strong>測試運行程序</strong>的輸出。您始終可以通過({0})激活它。
swift.navigation.windows.stop=按 {0} 停止應用程序。
swift.navigation.windows.go.to.file=我們從模擬器視窗切換回 IDE，然後通過 {1} 導航到 {0}。
swift.navigation.windows.toggle.break=使用 {0} 在第 11 行放置斷點，然後按 {1}。
swift.navigation.windows.debug=<strong>調試</strong>工具視窗({0})與 Xcode 的<strong>調試</strong>導航器相似。它在右側顯示所有監視和局部變量，在左側顯示線程列表。
swift.navigation.windows.stop.debug=按 {0} 停止應用程序。
swift.navigation.windows.breakpoints=<strong>斷點</strong>對話框的功能與 Xcode 中的<strong>斷點</strong>導航器的功能相同 - 它顯示項目中所有斷點的列表。使用 {0} 激活它。
swift.navigation.windows.init.git=通過 {0}→<strong>創建 Git 倉庫</strong>初始化 GIT 倉庫。現在使用 {1} 快捷鍵激活 <strong>VCS</strong> 工具視窗。
swift.navigation.windows.vcs.window=<strong>VCS</strong> 工具視窗提供處理版本控制系統所需的一切功能，包括<strong>變更</strong>視圖、<strong>VCS 日誌</strong>等等。
swift.navigation.precise.name=精準導航
swift.navigation.precise.intro=借助在代碼檔案中導航的幾種快捷鍵，可以大大提高開發效率。我們來快速了解一下這些快捷鍵。
swift.navigation.precise.next.error=此檔案中有幾個警告和錯誤。按 {0} 可導航到第一個錯誤。
swift.navigation.precise.next.error.again=現在，再次使用相同的快捷鍵跳轉到下一個錯誤。
swift.navigation.precise.first.error=使用 {0} 跳回到第一個錯誤。
swift.navigation.precise.comment.combo=現在，按 {0} - {1} - {2} 對其中的每一行進行註釋。
swift.navigation.precise.first.warning=現在再次按 {0} - 它應指向檔案中的第一個警告。
swift.navigation.precise.fix.warning=按 {0}，然後使用 {1} 修正第一個警告。
swift.navigation.precise.next.method=按 {0} 快速跳轉到當前檔案中的下一個方法。
swift.navigation.precise.prev.method=使用 {0} 跳轉到上一個方法。
swift.navigation.precise.jump.last.changes=假設您有一個很長的檔案，而您記不清其中所做的變更和變更的位置。按 {0} 跳轉到檔案中最近進行的變更。
swift.navigation.precise.jump.line=最後，當您需要跳轉到代碼中特定的行或列時，請按 {0}。
swift.navigation.search.name=搜尋
swift.navigation.search.intro=在 AppCode 中進行搜尋是不同的。我們為搜尋文本提供了特殊功能，為搜尋代碼也專門提供了其他功能。這是因為代碼並不只是文本而已 - 它具有由代碼結構形成的特定結構。
swift.navigation.search.var=此示例檔案中有許多包含 {0} 一詞的代碼結構。文本光標位於名稱為 {1} 的變量處。按 {2} 尋找 {3} 一詞的所有文本匹配項。
swift.navigation.search.find.usages.var=這不是很有用，是嗎? 在實際代碼中，我們可能想在不包括類名、方法名或任何其他代碼結構的情況下搜尋 {0} 變量。嘗試按 {1}，然後按 {2}。
swift.navigation.search.find.usages.var.result=現在，AppCode 僅顯示 {0} 變量的實際用法。
swift.navigation.search.find.usages.proto=這種相同的工作流適用於任何其他代碼結構。按 {0} → {1} 尋找 {2} 協議在此項目中的所有用法。
swift.navigation.search.find.usages.method=現在我們要尋找方法 {0} 的所有用法。再次按 {1} → {2}。
swift.navigation.search.rule=有一條簡單的規則，那就是確定需要尋找的符號，而不是需要尋找的文本片段。<strong>尋找用法</strong>適用於項目上下文中的任何代碼結構，因此將尋找在整個代碼庫中的所有用法。
swift.navigation.search.text.search=當然，有時您或許不知道要尋找的是何內容，並且您想通過搜尋文本來尋找盡可能多的匹配項。在這種情況下，可以使用 {0} 在當前檔案中執行搜尋，或者使用 {1} 在整個項目中執行搜尋。
swift.navigation.search.everything=如果要搜尋符號、文件名乃至 IDE 設定和菜單項中的某些文本怎麼辦? 按 <shortcut>⇧ 兩次</shortcut>打開<strong>隨處搜尋</strong>對話框。
swift.navigation.search.action=最後，嘗試使用<strong>尋找操作</strong>({0})快速尋找並執行 IDE 操作。例如，鍵入 ''plugins'' 以打開<strong>偏好設定 | 插件</strong>。
swift.navigation.todo.name=TODO 與書簽
swift.navigation.todo.activate=您是否想知道代碼中有多少個待辦事項? <ide/> 中有一個專門的 <strong>TODO</strong> 工具視窗。按 {0} 激活此視窗。
swift.navigation.todo.custom=您可以定義自己的自定義 <strong>TODO</strong> 篩選器。使用 {0} →<strong>編輯篩選器</strong>打開 TODO 篩選器對話框，然後使用正則表達式添加篩選器。
swift.navigation.todo.go.back=按 {0} 返回編輯器。
swift.navigation.todo.bookmark=現在，按 {0}。此快捷鍵可在代碼中切換書簽。書簽保存在項目目錄中，如果想將同事引導至代碼中的特定位置，可以使用書簽這項很有用的功能。
swift.navigation.todo.all.bookmarks=使用 {0} 快捷鍵查看所有書簽。
swift.navigation.todo.change.bookmark=您可以更改書簽的名稱。按 {0}，然後為其鍵入新名稱。
swift.navigation.todo.favorites=使用 {0} 關閉<strong>書簽</strong>對話框。按 {1}。在<strong>收藏夾</strong>工具視窗中，可以看到聚合書簽、斷點和收藏夾。
swift.refactoring.change.signature.name=更改簽名
swift.refactoring.change.signature.intro=<strong>更改簽名</strong>是一種重構，通過它可以同時更改方法和函數的名稱、編輯內部和外部形參名稱、更改它們的順序，還可以更改方法和函數的可見性。
swift.refactoring.change.signature.exec=按 {0} 將 {1} 名稱更改為 {2}。
swift.refactoring.change.signature.exec.again=再次按 {0}。點擊包含 {1} 形參的行並將其更改為 {2}，或添加一個內部形參名稱。
swift.refactoring.change.signature.final=最後，再次調用<strong>更改簽名</strong>，使用 {0}/{1} 按鈕或 <shortcut>⌥↑</shortcut>/<shortcut>⌥↓</shortcut> \n 快捷鍵更改形參順序。
swift.refactoring.extract.closure.name=提取閉包
swift.refactoring.extract.closure.intro=通過“提取閉包”，您可以將所選代碼封裝到可自定義形參和返回類型的新閉包中。它的工作方式類似於“提取方法”重構。
swift.refactoring.extract.closure.exec=按 {0}，然後選擇<strong>閉包…</strong>。
swift.refactoring.extract.function.name=提取函數
swift.refactoring.extract.function.intro=“提取函數”是一種重構，通過它可以將所選代碼封裝到可自定義形參和返回類型的新函數中。將一些代碼行提取到新的 {0} 函數中。按 {1}。
swift.refactoring.extract.function.undo=按 {0} 撤消變更。
swift.refactoring.extract.function.change.params=在 <ide/> 中提取函數時，可以更改其簽名。點擊<strong>形參</strong>部分中的一個形參，然後使用 {0}/{1} 圖標更改形參順序。點擊形參行更改其名稱。
swift.refactoring.extract.function.exec.again=現在，按 {0} 並嘗試更改所提取函數的簽名。
swift.refactoring.extract.variable.name=提取變量
swift.refactoring.extract.variable.exec=按 {0} 將常量 {1} 提取到變量或字段 {2} 中。
swift.refactoring.extract.variable.description=“提取變量”不要求您選擇要提取的具體代碼段。只需將文本光標插入該語句處，然後選擇所需的表達式。
swift.refactoring.extract.variable.exec.again=現在，按 {0}，然後從列表中將其選定，以將 {1} 提取到變量 {2}。
swift.refactoring.rename.name=重命名
swift.refactoring.rename.any=您可以將文本光標放在符號上，並使用“重命名”重構來重命名任何內容。
swift.refactoring.rename.go.to.file=按 {1} 導航到 {0}。
swift.refactoring.rename.var=我們先從簡單的操作開始，例如將 {0} 字段重命名為 {1}。按 {2}，鍵入新名稱，然後按 {3}。
swift.refactoring.rename.class=重複執行相同的操作，並將 {0} 類型重命名為某些新值。
swift.refactoring.rename.check=按 {0}。可以看到，“重命名”重構全域有效，您甚至還可以重命名 .xib 和 .storyboard 檔案中的匹配項。
swift.rdt.debug.name=調試
swift.rdt.debug.intro=現在來了解如何調試您的代碼。
swift.rdt.debug.prepare=按 {1} 導航到 {0}。
swift.rdt.debug.toggle.break=使用 {0} 在第 11 行放置斷點，然後按 {1}。
swift.rdt.debug.step.into=按 {0} 單步執行，然後按 {1} 單步跳過。
swift.rdt.debug.run.cursor=現在將文本光標放置在第 21 行，然後通過 {0} 執行<strong>運行到光標</strong>。
swift.rdt.debug.step.over.next.line=單步跳過到下一行。
swift.rdt.debug.eval=使用 {1} 選擇 {0}，然後使用<strong>評估表達式</strong>({2} → {3})。
swift.rdt.debug.eval.again=鍵入點符號，選擇一些屬性，然後在不切換到 LLDB 控制台的情況下按 {0} 進行評估。
swift.rdt.debug.stop=按 {0} 停止調試應用程序。
swift.rdt.run.name=運行
swift.rdt.run.actions=針對運行項目和調試項目，<ide/> 提供兩種不同的操作(因為調試速度通常較慢)。按 {0} 運行您的應用程序。
swift.rdt.run.stop=按 {0} 停止您的應用程序。
swift.rdt.run.another=非常好! 要為當前運行配置選擇其他運行配置或模擬器並快速運行您的應用程序，請按 {0}，選擇目標運行配置或模擬器，然後按 {1}。
swift.rdt.run.final=按 {0} 停止您的應用程序。
swift.rdt.test.name=測試
swift.rdt.test.prepare=使用 {1} 導航到 {0}。
swift.rdt.test.intro=<ide/> 支援多種測試框架，其中包括 XCTest、Quick、Kiwi、Catch、Boost.Test 和 Google Test。我們來了解在測試應用程序時可以使用的所有常用功能。
swift.rdt.test.intro.tests=<ide/> 根據文本光標的位置自動識別測試範圍。當文本光標位於測試檔案中的某處時，可以執行此檔案中的所有測試。這同樣適用於單個測試。要運行單個測試，請將文本光標插入測試方法中。
swift.rdt.test.suite=按 {0} 運行測試套件中的所有測試。
swift.rdt.test.show=現在我們要在樹視圖中顯示測試。點擊 {0} 圖標。
swift.rdt.test.single=使用相同的 {0} 快捷鍵運行單個測試。
swift.rdt.test.debug.single=現在調試測試。使用 {0} 放置行斷點，然後使用 {1} 調試測試。
swift.rdt.test.resume=按 {0} 繼續執行。
swift.rdt.test.stop.debug=按 {0} 停止調試。
swift.rdt.test.go.back=按 {1} 導航回到 {0}。
swift.rdt.test.failing=現在有一項失敗的測試。使用 {0} 快捷鍵再次運行所有測試。
swift.rdt.test.filter.failed=點擊 {0} 圖標僅篩選出失敗的測試。
swift.rdt.test.delete.failed=使用 {1} 刪除 {0}。
swift.rdt.test.rerun.failed=現在點擊 {0} 僅重新運行失敗的測試。
swift.rdt.test.additional=您可以使用<strong>測試運行程序</strong>工具視窗中的特定圖標按持續時間({0})或按字母順序({1})對測試排序。按 {2} 再次運行所有測試，然後按持續時間對它們排序。
swift.rdt.test.history=內置的測試歷史記錄自動保存最近幾次測試運行的結果，並且也會將它們加載到測試運行程序工具視窗中。點擊 {0} 圖標並選擇列表中的一項，加載以前的一項測試運行。
swift.rdt.test.more=就是這樣! 對於某些框架(例如 <strong>Quick</strong>)，<ide/> 對測試結果提供了進一步增強的呈現效果。有關 <ide/> 支援的所有測試框架的概述，請觀看<a href="https://www.youtube.com/watch?v=DXvx6xNG_jc">這段影片</a>。
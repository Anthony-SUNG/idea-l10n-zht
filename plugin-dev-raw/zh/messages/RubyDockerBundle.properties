ruby.docker.compose.sdk.bundle.install.quick.fix.title=運行 'docker-compose build'
ruby.docker.sdk.bundle.install.quickfix.title=運行 'docker build .'
ruby.sdk.bundle.install.quick.display.name=重新構建 Docker 鏡像
ruby.sdk.bundle.install.and.docker.build.quick.display.name=在運行的容器中執行 'bundle install' 並重新構建 Docker 鏡像
ruby.docker.compose.sdk.precheck.message=正在檢查 docker-compose 服務

ruby.docker.no.execution.result=無法執行運行配置

ruby.docker.sdk.downloading=正在下載: {0}
ruby.docker.run.configuration.settings.pane.title=Docker

ruby.docker.compose.up.project="docker-compose up"
ruby.docker.compose.command.type.run.name=docker-compose run
ruby.docker.compose.command.type.up.name=docker-compose up
ruby.docker.compose.command.type.exec.name=docker-compose exec

configurable.name=Ruby 設置
configurable.internal.command.mode.caption=通過以下方式在 Docker 內與 Ruby 環境進行交互:
configurable.internal.command.mode.description=要進行分析，需要在 Docker 內部運行 'which ruby'、'gem env' 和 'rbconfig' 等命令
configurable.internal.command.mode.mixed=如果項目已啟動，則運行 'docker-compose exec'，否則運行 'docker-compose run'
configurable.internal.command.mode.run='docker-compose run'
configurable.internal.command.mode.sdk.container='docker exec' 位于 SDK 容器中，請根據需要創建 SDK 容器
configurable.internal.command.mode.exec='docker-compose exec'，如果需要則使用 `docker-compose up` 運行項目
configurable.gems.copy.mode.caption=使用以下命令將 Ruby SDK 和 gem 復制到本地緩存:
configurable.gems.copy.docker.dp.mode.caption='docker cp'
configurable.gems.copy.docker.api.caption=Docker 插件 API
border.title.docker.compose=docker-compose
dialog.message.command.docker.compose.up.failed=命令 'docker-compose up' 運行失敗。查看 `docker logs` 了解詳細信息
dialog.message.can.t.up.docker.compose=無法啟動 docker-compose
dialog.message.cancelled=已取消

uml.class.diagram.file.name=''{0}'' 类图
building.diagram=构建 {0}
error=错误
new.class=新类
new.enum=新枚举
new.record=新记录
new.interface=新接口
cant.create.element=无法在目录 {1} 中创建 {0}
add.new.field.title=向 {0} 添加新字段或常量
add.new.enum.constant.title=向 {0} 添加新的枚举常量
create.new.method.dialog.title=创建新方法
create.new.constructor.dialog.title=创建新构造函数
create.method=创建(&C)
final.class.cant.be.inherited=类 {0} 为 final
node.is.interface=接口只能继承一个接口
error.cant.create.edge=无法创建关系链接
preview=预览
this.will.remove.relationship.link.between.classes=这将移除类之间的关系链接并修改类 {0}。继续？
remove.relationship.link=移除关系链接
class.must.be.abstract.or.implement.methods=类 ''{0}'' 必须声明为 abstract 或实现所需的 abstract 方法
class.must.be.abstract.title=实现方法或声明抽象类
generate.methods=生成方法
make.abstract=设为 abstract
initializer.is.empty=初始值设定项为空
constant.in.interface.must.have.initializer=接口中的常量必须具有初始值设定项
class.is.readonly=类 ''{0}'' 是只读的
file.is.readonly=文件 ''{0}'' 是只读的
annotation.class.cant.be.extended.or.implemented=注解不能继承/实现其他类/接口
remove.annotation.from.class=从 {1} 中移除注解 @{0}
relationship.already.exists={0} 与 {1} 之间的关系已存在
show.supers.for={0} 的超类
UML=UML
uml.change.list.name=变更
uml.file.name.for.changes=''{0}'' 的变更
other=其他
select.uml.provider=选择图类型
dependencies=依赖项
uml.structure.view=图元素
abstract=抽象(&B)
set.up.jdk=未设置 JDK
make.class.abstract=将类设为 abstract
change.visibility.group.text=更改可见性级别
change.scope.group.text=更改范围
modules.diagram.presentable.name=项目模块
uml.0.presentable.name={0} 类图
uml.jigsaw.presentable.name=Java 模块
diff.presentable.name=显示差异
add.modules.libraries=添加模块和库...
looking.for.dependencies=查找依赖
dependencies.for.module=模块 ''{0}'' 的依赖
show.modules.dependencies=显示模块依赖
fit.content.after.layout=在布局后调整内容(&F)
do.relayout.when.new.elements.were.added=添加新元素时重新布局(&R)
default.layout=默认布局(&L)：
default.scope=默认作用域(&S)：
change.list.contains.too.many.files=更改列表 ''{0}'' 包含超过 {1} 个文件
show.categories.title=显示类别
uml.java.calculating.dependencies=正在计算依赖关系
uml.java.analyzing.0=正在分析 {0}
uml.java.package.title=软件包
uml.java.default.package.title=顶层软件包
action.UML.Find.text=查找元素图
action.UML.ShowStructure.text=查看结构
action.UML.SaveDiagram.text=保存 UML 图
action.Uml.ShowDiff.text=以 UML 显示差异
action.Uml.ExpandNodes.text=展开节点
action.Uml.CollapseNodes.text=收起节点
action.Diagram.Layout.CustomLayouter.text=图特定
action.Diagram.DeselectAll.text=取消全选
action.Diagram.SelectAll.text=全选
action.UML.ShowChanges.text=以 UML 显示本地变更
action.ShowUmlDiagramPopup.text=显示 UML 弹出窗口
action.ShowUmlDiagram.text=显示 UML 图
action.Uml.NewElement.text=新建
group.Uml.NewGroup.text=图表
group.UML.Group.text=图表
group.UML.Group.description=图表
group.UML.Group.Simple.text=图表
group.UML.Group.Simple.description=图表
group.UML.EditorGroup.text=图表
group.UML.EditorGroup.description=图表
configurable.UmlConfigurable.display.name=图表
settings.select.categories.text=选择将在显示图表时启用的类别
color.descriptor.node.header=节点//节点标头
color.descriptor.node.background=节点//节点背景
color.descriptor.realization.edge=边缘//实现边缘
color.descriptor.generalization.edge=边缘//泛化边缘
color.descriptor.default.edge=边缘//默认边缘
color.descriptor.annotation.edge=边缘//注解边缘
color.descriptor.inner.class.edge=边缘//内部类边缘
color.descriptor.note.background=注释//注释背景
color.descriptor.note.border=注释//注释边框
dialog.message.can.t.save.converted.content.into.file.check.read.only.status=无法将转换的内容保存到文件中。请检查是否为只读状态。
dialog.title.old.diagram.format=旧图格式
dialog.message.this.file.has.old.format.would.you.like.to.convert.it=此文件为旧格式。要转换吗?
action.text.show.0.1=显示 {0}{1}…
dialog.description.save.uml.class.diagram.as.uml=将 UML 类图另存为 .uml
dialog.title.save.file=保存文件
configurable.display.name.diagrams=图表
group.action.text.new=新建
dialog.title.edit.note=编辑注释
dialog.message.note.text=注释文本
popup.title.select.target.node=选择目标节点                         
goto.class.prompt.text.enter.class.name.to.add=输入要添加的类名
dialog.title.add.a.note=添加注释
popup.title.select.change.list=选择变更列表
filetype.diagram.description=图
filetype.diagram.display.name=图
task.title.calculating.paths=正在计算路径
dialog.message.can.t.show.more.than.0.changes.at.one.diagram=在一个图中显示的变更数不能超过 {0} 个。
action.name.show.diagram.structure=显示图结构
action.name.set.edge.creation.mode=设置边缘创建模式
action.name.select.all=全选
command.edit.note=编辑注释
notification.message.scope.has.been.changed.to.b.all.b=范围已被更改为<b>全部</b>
action.name.change.visibility.to.0=将可见性更改为 {0}
action.name.safe.delete=安全删除
action.name.show.dependencies=显示依赖项
action.name.collapse.nodes=收起节点
action.name.expand.nodes=展开节点
action.name.change.scope.to.0=将范围更改为 {0}
action.name.create.line=创建行
action.name.add.note=添加注释
action.name.save.diagram=保存图
action.name.deselect.all=取消全选
action.name.add.elements2=添加元素
action.name.enable.category=启用 {0}
action.name.disable.category=禁用 {0}
show.intentions.for.node=显示节点的意图
add.class.to.diagram=将类添加到图…
show.parents=显示父级
show.implementations=显示实现
creates.a.relationship.between.nodes=创建节点之间的关系
line.to=行目标…
searching.for.elements=正在搜索元素
can.t.save.diagram.to.0=无法将图保存到 {0}
edge.creation.mode=边缘创建模式
changes.for.revision.0=修订 {0} 的变更
add.note.action.title=注释
uml.dependencies.settings.group.title=依赖项
category.name.show.neighbours.of.selected.nodes=显示所选节点的近邻
category.name.show.paths.root.selection=显示路径: 根 -> 选择
category.name.fields=字段
category.name.constructors=构造函数
category.name.methods=方法
category.name.properties=属性
category.name.inner.classes=内部类
category.name.dependencies=依赖项
category.name.all=所有
category.name.constants=常量
category.name.details=详细信息
uml.action.name=图
visibility.level.package=public + package
visibility.level.all=所有
delete.selection.command.name=移除所选对象
add.element.to.diagram=向图中添加元素
unknown.uml.file=未知 UML 文件
show.diagram.popup.title={1} 的 {0}
unknown.uml.action=未知 UML 操作
cant.annotate.class.0=无法注解类 {0}
diagram.edge.origins=边缘原点

# suppress inspection "UnusedProperty"
diagram.layout.compact.orthogonal=紧凑
# suppress inspection "UnusedProperty"
diagram.layout.component=组件
# suppress inspection "UnusedProperty"
diagram.layout.directed.orthogonal=定向(从下至上)
# suppress inspection "UnusedProperty"
diagram.layout.hierarchic=分层
# suppress inspection "UnusedProperty"
diagram.layout.hierarchic.compact=分层紧凑
# suppress inspection "UnusedProperty"
diagram.layout.orthogonal.groups=正交群
# suppress inspection "UnusedProperty"
diagram.layout.channel=通道
# suppress inspection "UnusedProperty"
diagram.layout.series.parallel=串并联
# suppress inspection "UnusedProperty"
diagram.layout.circular=循环
# suppress inspection "UnusedProperty"
diagram.layout.circular.edge.bundled=边缘捆绑(圆形)
# suppress inspection "UnusedProperty"
diagram.layout.radial=径向
# suppress inspection "UnusedProperty"
diagram.layout.radial.edge.bundled=边缘捆绑(径向)
# suppress inspection "UnusedProperty"
diagram.layout.single.cycle=单循环
# suppress inspection "UnusedProperty"
diagram.layout.ar.tree=紧凑
# suppress inspection "UnusedProperty"
diagram.layout.balloon=气球
# suppress inspection "UnusedProperty"
diagram.layout.balloon.edge.bundled=边缘捆绑(气球)
# suppress inspection "UnusedProperty"
diagram.layout.family.tree=系列
# suppress inspection "UnusedProperty"
diagram.layout.generic.tree=泛型
# suppress inspection "UnusedProperty"
diagram.layout.hv.tree=宽
# suppress inspection "UnusedProperty"
diagram.layout.organic=有机
# suppress inspection "UnusedProperty"
diagram.layout.organic.edge.bundled=边缘捆绑(有机)
# suppress inspection "UnusedProperty"
diagram.layout.random=随机
# Specific for the concrete diagram type
# suppress inspection "UnusedProperty"
diagram.layout.custom=自定义

diagram.scope.all=所有
diagram.scope.project.files=项目文件
diagram.scope.non-project.files=非项目文件
diagram.scope.production=生产
diagram.scope.tests=测试
group.Diagram.MergeEdgesGroup.text=合并边缘
color.descriptor.node.sloppy.background=节点//概览节点背景
color.descriptor.node.border=节点//节点边框
color.descriptor.selected.node=节点//所选节点边框
color.descriptor.note.sloppy.background=注释//概览注释背景
color.descriptor.selected.edge=边缘//边缘选区
color.descriptor.bend=弯曲//弯曲
color.descriptor.selected.bend=弯曲//弯曲选区
color.descriptor.hot.spot=热点
color.descriptor.port=端口
color.descriptor.snap.lines=对齐行
color.descriptor.selection.box.border=选择框//选择框边框
color.descriptor.selection.box.background=选择框//选择框背景
notification.can.t.open.diagram.while.indexing.is.in.progress=编制索引期间无法使用图表
category.name.show.borders=显示边框
group.Diagram.AppearanceGroup.text=外观
action.Diagram.SearchItemOnWeb.text=使用 Google 搜索
group.Uml.NodeCellEditorPopup.QuickActions.text=显示
group.Uml.NodeCellEditorPopup.GoTo.text=转到
group.Diagram.ExportGroup.text=导出图
color.descriptor.fine.grid=细网格
color.descriptor.coarse.grid=粗网格
diagram.build.progress.preparing.data=正在准备数据…
diagram.build.progress.starting.data.model.build=正在开始数据模型构建…
diagram.build.progress.building.data.model=正在构建数据模型…
diagram.build.progress.opening.diagram=正在打开图
diagram.build.progress.finishing.diagram.build=正在完成…
java.build.progress.searching.for.classes=正在搜索类…
java.build.progress.searching.for.class.members=正在搜索类成员…
java.build.progress.inferring.nullability=正在推断可空性…
java.build.progress.inferring.relationships=正在推断关系…
java.build.progress.analyzing=正在分析 {0}
layout.on.category.switch=类别开关上的布局(&C):
shorten.node.items.on.length=缩短长度上的节点条目(&I):
layout.animation.duration=布局动画持续时间(&A):
diagram.layout.on.category.switch.never=从不
diagram.layout.on.category.switch.with.current.layouter=使用当前布局器
diagram.layout.on.category.switch.with.light.layouter=使用简易布局器
diagram.settings.layout.title=布局
diagram.settings.appearance.title=外观
diagram.settings.enable.animations=启用动画(&A)
action.Diagram.DeleteSelection.text=删除
group.change.content.name=内容
visibility.level.public=仅 public
visibility.level.protected=public + package + protected
action.Diagram.OpenSettings.text=打开图表设置
group.Uml.Refactoring.text=重构
group.UML.SourceActionsGroup.text=所选元素操作
group.Uml.SourceActionsGroup.QuickActions.text=显示
group.Uml.SourceActionsGroup.GoTo.text=转到
add.note.with.docs.action.title=使用元素文档进行备注
add.note.no.docs.found=未找到任何文档
group.Diagram.ExportToFileGroup.text=导出到文件
group.Diagram.OpenInOnlineEditorGroup.text=在 Web 编辑器中打开
action.Diagram.ExportToFileGroup.DotWithPositions.text=带位置的 Graphviz.dot
action.Diagram.ExportToFileGroup.Dot.text=Graphviz .dot
action.Diagram.ExportToFileGroup.Mxgraph.text=JGraph .drawio
action.Diagram.ExportToFileGroup.Plantuml.text=Plantuml
action.Diagram.ExportToFileGroup.Graphml.text=YEd .graphml
action.Diagram.OpenInOnlineEditorGroup.DotWithPositions.text=带位置的 Graphviz.dot
action.Diagram.OpenInOnlineEditorGroup.Dot.text=Graphviz .dot
action.Diagram.OpenInOnlineEditorGroup.Mxgraph.text=JGraph .drawio
action.Diagram.OpenInOnlineEditorGroup.Plantuml.text=Plantuml
action.Diagram.OpenInOnlineEditorGroup.Graphml.text=YEd .graphml
group.Diagram.CopyToClipboardGroup.text=复制到剪贴板
action.Diagram.ExportToFileGroup.Mermaid.text=Mermaid .md
action.Diagram.OpenInOnlineEditorGroup.Mermaid.text=Mermaid Live
action.Diagram.CopyToClipboardGroup.DotWithPositions.text=作为具有位置的 Graphviz DOT
action.Diagram.CopyToClipboardGroup.Dot.text=作为 Graphviz DOT
action.Diagram.CopyToClipboardGroup.Mermaid.text=作为 Mermaid
action.Diagram.CopyToClipboardGroup.Plantuml.text=作为 Plantuml
change.ordering.group.text=变更项目顺序
action.name.change.ordering.to.0=将项目顺序变更为 {0}
ordering.as.in.source.code=按声明顺序排序
ordering.alphabetically=按字母顺序排序
ordering.by.visibility=按可见性排序
diagram.node.item.style=Node item style
diagram.node.style.plain=纯
diagram.node.style.with.types.aligned=With types aligned
diagram.export.progress=Exporting…
group.Diagram.ExportAndCopyGroup.text=导出图
action.Diagram.RefreshDataModelManually.text=Refresh Data Model
color.descriptor.highlighted.node=Nodes//Highlighted node border
diagram.focusview.focus.view=Focus View
dialog.diagram.focus.view.on=Focus View On
dialog.diagram.focus.view.on.paths.between.two.nodes.title=Focus View On Paths Between Two Nodes
dialog.diagram.focus.view.on.node.neighbourhood.title=Focus View On Node Neighbourhood
dialog.diagram.focus.view.on.cycles.title=Focus View On Cycles
dialog.diagram.focus.view.on.directed.paths.from.0.to.1=Directed paths from {0} to {1}
dialog.diagram.focus.view.on.directed.paths.from.0=Directed paths from {0}
dialog.diagram.focus.view.on.directed.paths.to.0=Directed paths to {0}
dialog.diagram.focus.view.on.directed.paths.in.both.directions=Directed paths in both directions
dialog.diagram.focus.view.on.undirected.paths=Undirected paths
dialog.diagram.focus.view.on.directed.cycles=Directed cycles
dialog.diagram.focus.view.on.undirected.cycles=Undirected cycles
dialog.diagram.focus.view.find.button.title=查找
diagram.focus.view.no.path.has.been.found.notification=No path has been found
dialog.diagram.focus.view.path.filter=Show Paths
dialog.diagram.focus.view.path.filter.all=所有
dialog.diagram.focus.view.path.filter.k.shortest=K shortest:
dialog.diagram.focus.view.cycles.filter=Show Cycles
dialog.diagram.focus.view.cycles.filter.all=所有
dialog.diagram.focus.view.cycles.filter.containing.all.selected.nodes=Containing all selected nodes
dialog.diagram.focus.view.cycles.filter.containing.any.selected.node=Containing any selected node
dialog.diagram.measure.centrality=Measure Centrality
dialog.diagram.centrality.number.of.connected.edges=Number of connected edges
dialog.diagram.centrality.number.of.connected.edges.description=Shows the number of the incoming, outgoing or overall edges incident to a node (measures incoming, outgoing and overall degree)
dialog.diagram.centrality.graph.centrality=Graph centrality
dialog.diagram.centrality.graph.centrality.description=Shows reciprocal of the maximum of all shortest path distances from a node to all other nodes
dialog.diagram.centrality.nodes.betweenness.centrality=Node betweenness centrality
dialog.diagram.centrality.nodes.betweenness.centrality.description=Shows how often a node/edge lies on a shortest path between each pair of nodes
dialog.diagram.centrality.closeness.centrality=Closeness centrality
dialog.diagram.centrality.closeness.centrality.description=Shows the reciprocal of the sum of shortest path distances of a node to all other nodes
dialog.diagram.centrality.edges.to.consider=Edges to Consider
dialog.diagram.centrality.edges.to.consider.incoming=传入
dialog.diagram.centrality.edges.to.consider.outgoing=Outgoing
dialog.diagram.centrality.consider.edge.directions=Consider edge directions
dialog.diagram.centrality.measure.button.title=Measure
diagram.path.finding=Path finding…
diagram.computing.characteristics=Computing graph characteristics…
diagram.measuring.centrality=Measuring centrality…
dialog.diagram.graph.characteristics.title=Graph Common Characteristics
diagram.graph.characteristics.group.common=通用
diagram.graph.characteristics.group.connectivity=Connectivity
diagram.graph.characteristics.group.cycles=周期
diagram.graph.characteristics.node.count=Node count:
diagram.graph.characteristics.node.count.context.help=Number of nodes in the graph
diagram.graph.characteristics.edge.count=Edge count:
diagram.graph.characteristics.edge.count.context.help=Number of edges in the graph
diagram.graph.characteristics.average.degree=Average degree:
diagram.graph.characteristics.average.degree.context.help=The <i>average degree</i> measures the number of edges in comparison to the number of nodes and is defined as: <code>numberOfEdges / numberOfNodes</code>
diagram.graph.characteristics.density=Density:
diagram.graph.characteristics.density.context.help=The <i>density</i> is the ratio of edges of the graph to the maximum possible number of edges and is defined as: <code>numberOfEdges / (numberOfNodes * (numberOfNodes - 1))</code>
diagram.graph.characteristics.contains.self.loops=Contains self-loops:
diagram.graph.characteristics.contains.self.loops.context.help=An edge is called <i>self-loop</i> if its source and target are the same node
diagram.graph.characteristics.is.simple=Is simple:
diagram.graph.characteristics.is.simple.context.help=A graph is called <i>simple</i> if it contains no two distinct edges <code>e1, e2</code> where <code>e1.source()</code> equals <code>e2.source()</code> and <code>e1.target()</code> equals <code>e2.target()</code>
diagram.graph.characteristics.contains.multiple.edges=Contains multiple edges:
diagram.graph.characteristics.contains.multiple.edges.context.help=Two distinct edges <code>e1, e2</code> are called <i>multiple edges</i> if they connect the same pairs of nodes in either direction
diagram.graph.characteristics.is.connected=Is connected:
diagram.graph.characteristics.is.connected.context.help=A graph is called <i>connected</i> if there exists an undirected path of edges between every pair of nodes
diagram.graph.characteristics.is.biconnected=Is biconnected:
diagram.graph.characteristics.is.biconnected.context.help=A graph is called <i>biconnected</i> if it has no cut vertex or articulation point, i.e. no node whose removal disconnects the graph
diagram.graph.characteristics.is.strongly.connected=Is strongly connected:
diagram.graph.characteristics.is.strongly.connected.context.help=A graph is called <i>strongly connected</i> if there exists a directed path between each pair of nodes
diagram.graph.characteristics.is.acyclic=Is acyclic:
diagram.graph.characteristics.is.acyclic.context.help=A graph is called <i>acyclic</i> if it contains no directed cycle
diagram.graph.characteristics.is.bipartite=Is bipartite:
diagram.graph.characteristics.is.bipartite.context.help=A graph is called <i>bipartite</i> if its nodes can be partitioned into two sets such that each edge connects two nodes of different sets
diagram.graph.characteristics.is.planar=Is planar:
diagram.graph.characteristics.is.planar.context.help=A graph is called <i>planar</i> if it can be drawn on the plane without edge crossings
diagram.graph.characteristics.is.forest=Is forest:
diagram.graph.characteristics.is.forest.context.help=A graph is called a <i>forest</i> if its connected components are trees
diagram.graph.characteristics.is.tree=Is tree:
diagram.graph.characteristics.is.tree.context.help=A graph is called a <i>tree</i> if it is an acylic connected graph
diagram.graph.characteristics.yes=是
diagram.graph.characteristics.no=否
group.Diagram.AnalyzeGraphGroup.text=Analyze Graph
action.Diagram.AnalyzeGraph.ShowCharacteristics.text=Show Graph Characteristics…
action.Diagram.AnalyzeGraph.DropFocus.text=Drop Focus
action.Diagram.AnalyzeGraph.FocusOnSelectedNodes.text=Focus On Selected Nodes
action.Diagram.AnalyzeGraph.FocusOnNodeNeighbourhood.text=Focus On Node Neighbourhood…
action.Diagram.AnalyzeGraph.FocusOnPathsBetweenTwoNodes.text=Focus On Paths Between Two Nodes…
action.Diagram.AnalyzeGraph.FocusOnCycles.text=Focus On Cycles…
action.Diagram.AnalyzeGraph.MeasureCentrality.text=Measure Centrality…
action.Diagram.AnalyzeGraph.DropCentralityValues.text=Drop Centrality Labels
dialog.diagram.auto.clustering=Automatic Clustering
dialog.diagram.auto.clustering.biconnected=Biconnected components
dialog.diagram.auto.clustering.biconnected.description=Nodes will be grouped such that the nodes within each group are biconnected. Nodes that belong to multiple biconnected components will be assigned to exactly one of these components.
dialog.diagram.auto.clustering.edge.betweenness=Edge betweenness
dialog.diagram.auto.clustering.edge.betweenness.description=In each iteration the edge with the highest betweenness centrality is removed from the graph. The method stops if there are no more edges to remove or if the requested maximum number of groups is found.
dialog.diagram.auto.clustering.quality.time.ratio=Quality/Time Ratio
dialog.diagram.auto.clustering.kmeans=K Means
dialog.diagram.auto.clustering.kmeans.description=The nodes of the graph will be partitioned in K clusters based on their positions such that their distance from the cluster's mean (centroid) is minimized
dialog.diagram.auto.clustering.button.title=运行
diagram.auto.clustering.cluster=群集
diagram.auto.clustering=Automatic clustering…
action.Diagram.AnalyzeGraph.AutoClustering.text=Automatic Clustering…
action.Diagram.AnalyzeGraph.DropClustering.text=Drop Clustering
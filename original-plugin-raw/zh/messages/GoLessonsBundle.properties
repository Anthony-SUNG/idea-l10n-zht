
go.onboarding.module.name=入门导览
go.onboarding.module.description={0} 中的主要功能概览
go.onboarding.lesson.name=熟悉 {0}
go.onboarding.project.view.description=<strong>项目</strong>视图是主要工具窗口之一。它包含项目目录、SDK 特定的软件包和临时文件。使用带条纹的按钮可以将其打开，您会看到一个简单的演示项目。也可以按 {0} 打开。
go.onboarding.balloon.project.view=点击以打开<strong>项目</strong>视图
go.onboarding.balloon.project.directory=双击项目目录可以将其展开并查看项目文件
go.onboarding.balloon.open.file=双击以打开 {0}
go.onboarding.balloon.open.learn.toolbar=切换到“{0}”工具窗口继续学习本课
go.onboarding.context.menu=您可以通过不同的方式运行代码。其中的一种方式是利用上下文菜单。\n\
尝试通过右键点击代码所在编辑器中的区域调用上下文菜单。
go.onboarding.run.sample=选择 {0} 或尝试 {1}。
go.onboarding.temporary.configuration.description=<ide/> 刚刚创建了一个临时运行配置。您可以在“运行”工具栏中找到此配置。使用此工具栏，您可以为所选配置执行常用的运行操作，例如运行 {0}、调试 {1}、分析代码 {2} 以及运行代码覆盖率 {3}。
go.onboarding.balloon.click.here=点击此处设置断点
go.onboarding.toggle.breakpoint.1=您可能会注意到 {1} 方法没有返回预期值 {0}，而是返回 {2}。我们来查看 return 语句，调试有问题的代码。
go.onboarding.toggle.breakpoint.2=点击高亮显示区域中的间距以设置断点。
go.onboarding.balloon.start.debugging=点击该图标以开始调试
go.onboarding.start.debugging=点击 {0} 图标启动调试过程。
go.onboarding.balloon.about.debug.panel={0} 工具窗口为{1,choice,0#工具栏|1#工具栏}提供了各种调试操作。您可以稍后在 {2} 课程中进行尝试。
go.onboarding.balloon.stop.debugging=点击该图标以停止调试
go.onboarding.stop.debugging=我们来停止调试。点击 {0} 图标。
go.onboarding.type.division=发现代码中的问题后，我们来进行修正。将得到的和除以值的长度。键入 {0}。
go.onboarding.choose.len.item=<ide/> 会在您键入时自动显示补全选项。使用键盘上的箭头选择 {0} 条目，然后按 {1}。
go.onboarding.invoke.completion=现在调用代码补全，在括号 {1} 中插入 {0}。按 {2} 打开补全列表。
go.onboarding.choose.values.item=您可以键入 {0} 来减少建议的条目数。选择 {1} 并按 {2}。
go.onboarding.invoke.intention.for.warning.1=您刚刚修正了一个错误，但还可以进一步改进这段代码。<ide/> 将高亮显示可以改进的代码行，并为这些行添加黄色灯泡。
go.onboarding.invoke.intention.for.warning.2=按 {0} 预览警告并应用快速修复。
go.onboarding.select.fix=应用第一个条目: {0}。通过该修正消除了不必要的圆括号。
go.onboarding.invoke.intention.for.code=意图还可以节省您的时间，让编码更轻松。我们使用意图将 {0} 函数快速转换为导出函数。按 {1}。
go.onboarding.apply.intention=选择 {0} 并按 {1}。
go.onboarding.invoke.search.everywhere.1=在 <ide/> 中进行处理时，您可能想要搜索项目中的文件、符号、类型乃至 IDE 操作。在本课中，我们将搜索 {0} 操作，以将 {1} 字符串改为小写。
go.onboarding.invoke.search.everywhere.2=按两次 {0} 以打开“{1}”对话框。
go.onboarding.search.everywhere.description=可以看到，所选文本 {0} 已被自动复制到输入字符串中。我们不键入 {0}，而是键入 {1}。
go.onboarding.apply.action=选择“{0}”操作，然后按 {1}。
go.onboarding.case.changed=大小写已更改。
go.onboarding.epilog=恭喜! 您已完成入门导览。此时，您可以:\n\
  - <callback id="{0}">关闭</callback>学习项目{1}\n\
  - <callback id="{2}">显示</callback>更多教程
go.onboarding.return.to.welcome=\ 并返回欢迎屏幕
go.onboarding.finish.title=恭喜
go.onboarding.finish.text=您刚刚完成了 <ide/> 入门导览。\n\
现在可以关闭学习项目{0}。\n\
您也可以继续学习，尝试其他课程。
go.onboarding.finish.exit=关闭演示项目
go.onboarding.finish.modules=显示更多课目
toggle.case.part=大小写
go.onboarding.close.debug.tool.window=要关闭{0}工具窗口，请按 {1}。
go.what.s.new.module.name=GoLand 2021.3 中的最新变化
go.what.s.new.module.description=GoLand 2021.3 的新功能(2021 年 11 月)
go.wrapping.lesson.name=换行并删除代码行
go.wrapping.delete.line=警告指出，我们尝试将两个 struct 字段（{0} 和 {1}）映射到相同的 JSON 字段名称，此做法并不好。遇到此错误，程序仍能运行，但将在输出中遗漏一个键。\n\
要修正此问题，您可以重命名标记字符串中的值或删除整个字符串。简单起见，我们按 {2} 移除整个字符串。
go.basic.editing.module.name=代码编辑
go.basic.editing.module.description=可以帮助您编辑代码的操作
go.code.completion.module.description=上下文感知的代码补全可加快编码过程并减少拼写错误
go.debugging.module.description=调试可以帮助您发现并解决应用程序中的问题
go.testing.module.description=测试可确保代码的行为正确无误且符合预期
go.generating.code.module.description=生成代码块的操作和模板
go.intention.actions.module.description=意图操作可以为您提供代码的替代变体，甚至为检测到的问题提供解决方案
go.refactorings.module.description=重构可使您的代码可靠、简洁并易于维护
go.error.handling.module.name=错误处理
go.error.handling.module.description=了解如何在 Go 中加快错误处理速度
go.advanced.module.name=高级
go.advanced.module.description=需要对该语言有更深理解的功能
go.navigation.module.name=导航
go.navigation.module.description=在代码库中进行移动
go.code.style.module.name=代码样式
go.code.style.module.description=在您的源代码中应用 Go 编码惯例
go.search.module.name=搜索
go.search.module.description=了解 IDE 的搜索功能
go.smart.type.completion.and.pointers.lesson.name=智能类型补全: 指针
go.postfix.completion.lesson.name=后缀补全
go.postfix.completion.intro=使用后缀模板，您可以根据点号、表达式类型及其上下文后的后缀，将已经输入的表达式转换为其他表达式。您可以使用一组预定义的后缀补全模板或创建新模板。有关自定义后缀模板的更多信息，请参阅<a href = "{0}">此文档文章</a>。
go.postfix.completion.better.variable.names.in.templates.description=<ide/> 可以帮助您对使用 {0} 和 {1} 后缀模板生成的变量进行命名。例如，在以下建议中，您可以会遇到：用于索引的 {2} 或 {3}，或者用于 {5} 的 {4} 。
go.postfix.completion.better.variable.names.in.templates.use.forr=键入 {0}，然后从补全列表中选择 {1} 后缀模板。
go.struct.inspections.lesson.name=struct 检查
go.struct.inspections.jump.to.warning=Go 按惯例会对 struct 标记编程。您可以阅读 <a href="{0}">pkg.go.dev 的文章</a>了解更多有关这些惯例的信息。\n\
IDE 已经了解这些惯例，并且将帮助您查找违反 Go 惯例的不一致部分。找到的所有问题都会高亮显示。例如，{1} 字段周围的高亮显示。\n\
来导航到该错误，看看有什么问题吧。要跳转到警告，请按 {2}。
go.struct.inspections.delete.line=警告指出，我们尝试将两个 struct 字段({0} 和 {1})映射到相同的 JSON 字段名称，这并不好。遇到此错误，程序仍将运行，但是我们将在输出中错过一个键。\n\
要修正此问题，您可以重命名标记字符串中的值或删除整个字符串。我们简单点，按 {2} 删除整个字符串。
go.inspection.unsafe.context.cancellation.name=不安全的上下文取消
go.inspection.unsafe.context.cancellation.go.to.error=您可以在 <ide/> 于代码分析期间发现的问题之间导航。\n\
示例中包含一个问题。按 {0} 查看此问题。
go.inspection.unsafe.context.cancellation.add.defer={0} 代码检查会检查是否在所有执行路径上调用了 {2} 返回的 {1} 函数和类似函数。\n\
由于我们不在 {4} 执行路径上调用 {3}，因此您需要键入 {5} 来修复警告。
go.formatting.lesson.name=内置格式化程序
go.formatting.reformat.selection=<ide/> 可以帮助您进行代码格式化。点击 {0} 重新格式化所选代码块。
go.formatting.clear.selection=要清理选择，按 {0}。
go.formatting.whole.file=要重新格式化整个源文件，请在未选择任何行的情况下使用 {0}。
go.fmt.lesson.name=运行 go fmt
go.fmt.task=如果您倾向于使用 {0} 格式化代码，可以按 {1} 运行。
go.general.templates.lesson.name=实时模板: fori 和 vars
go.general.templates.intro=实时模板可在代码中插入常见结构，如循环、条件、各种声明或打印语句。
go.general.templates.fori=我们从循环开始。输入{0} 并从建议列表中选择 {0}。在循环中设置以下条件: {1}。
go.general.templates.type.iteration=每次迭代，{0} 循环必须执行 {1}。
go.live.templates.with.types.lesson.name=实时模板: 创建类型和接口
go.handling.errors.with.templates.lesson.name=实时和后缀模板: if 和 rr
go.handling.errors.with.templates.if.not.null=部分函数返回两个值。例如，{0} 返回指向 {1} 的指针和错误值。如果错误值为 {2}，则文件成功打开。如果错误不是 {3}，则说明发生了错误。在 <ide/> 中，实时和后缀模板可以帮助您更快速地编写错误值的处理进程。\n\
键入 {4}，然后从补全列表选择 {5} 实时模板。
go.handling.errors.with.templates.return.nil.err=如果打开文件时出错，则需要返回一个切片和一个错误。我们可以返回 {0} 和 {1}。开始键入 {2}，选择 {3} 实时模板。
go.handling.errors.with.templates.error.case=后缀代码补全可帮助您减少编写代码时的后向文本光标跳转。使用这些模板，可以将已经键入的表达式转换为另一种表达式。您可以在 {0} 部分中找到有关后缀补全的更多课程。\n\
扫描文件时，{1} 可能会遇到错误。如果发生错误，在扫描仪上调用 {2} 方法将返回该错误。\n\
要处理从 {2} 方法返回的可能错误，只需键入 {3} 并按 {4} 应用后缀模板。
go.quick.fix.refactorings.lesson.name=重命名、创建变量并将 Println 改为 Printf
go.working.with.parameters.lesson.name=使用形参
go.working.with.parameters.single.type=如果函数或方法签名中具有单个类型的多个参数，则可以为这些参数使用简短的类型规范({0})，也可以为每个参数使用单独的类型规范({1})。
go.working.with.parameters.invoke.intentions.1=文本光标位于 {0} 方法的第一个参数处。按 {1} 调用意图操作。
go.working.with.parameters.signature.combined=注意签名类型是如何组合的。
go.working.with.parameters.press.action.again=现在再按一下 {0}。
go.working.with.parameters.signature.expanded=要将签名恢复到初始状态，请选择 {0}。
go.working.with.parameters.that.are.not.used=<ide/> 可以检测签名中未用于方法或函数体的参数。只要它们不被使用，就可以通过 {0} 快速修复将其删除。
go.working.with.parameters.invoke.intentions.2=注意编辑器中的 {0} 方法。文本光标位于第一个参数处。按 {1} 调用意图操作。
go.working.with.parameters.remove.parameters=<ide/> 仅高亮显示未使用形参的名称，前提是其类型用于实现方法规范。在这种情况下，您可以将此形参重命名为 {0} 或完全移除其名称。
go.working.with.parameters.invoke.intentions.3=如果方法要实现接口时需要形参，那么移除将产生不安全的结果。按 {0} 查看可能选项的列表。
go.extract.methods.with.returns.lesson.name=提取方法
go.extract.inline.variables.lesson.name=提取和内联变量
go.extract.inline.variables.extract.task=按 {0} 提取变量，选择一个字符串表达式，输入新名称，然后按 {1} 完成重构。
go.extract.inline.variables.inline.task=与 {0} 重构相反，{1} 有助于移除冗余变量。按 {2} 可将变量内联到其单个用法中。
go.working.with.json.name=使用 JSON
go.working.with.json.copy=<ide/> 有几种工具可以帮助您更有效地处理 JSON 代码。\n\
按 {0} 复制所选的 JSON。
go.working.with.json.replace=按 {0} 替换注释部分。出现“{1}” 对话框时，请点击<strong>是</strong>。\n\
<ide/> 自动将复制的 JSON 部分转换为结构类型。
go.working.with.json.name.struct=更改结构名称，键入 {0}，然后按 {1} 完成编辑。IDE 将自动修复您的格式设置。
go.working.with.json.introduce.type=提取嵌入到 {1} 结构中的 {0} 结构。\n\
按 {2} 并选择 {3}。
go.working.with.json.change.style=您可以为标记中的字段名称应用不同的代码样式。例如，将其更改为骆驼拼写法。\n\
按 {0}，点击“{1}”，然后选择“{2}”。
go.working.with.json.update.value.in.tags=标记值的批处理更新也是如此。假设我们想将 {0} 添加到当前结构中的每个标记。\n\
按 {1}，选择 {2}，然后键入 {3}。\n\
您也可以从建议列表中选择 {0}。<ide/> 知道 JSON、XML 和 ASN1 标记的最常用值。
go.working.with.json.add.key.to.tags=要添加 XML 和 ASN1 标记，也可以使用意图操作。\n\
按 {0} 再次调用意图操作，然后选择 {1} 并键入 {2}。
go.code.completion.for.time.package.name=基础补全: time 软件包
go.code.completion.for.time.package.year= 要设置日期和时间元素的格式，{0} 软件包使用以下预定义布局中的值: {1}。这意味着您可以使用引用时间元素作为占位符来定义格式。因此，在编码时间而不是 {4} 时，您应该编写 {5}。\n\
如果您忘记了预定义布局中的值，则可以使用代码补全作为提示。例如，按 {2} 并选择 {3} 可粘贴年份元素。
go.code.completion.for.time.package.month= 再次按 {0}，然后为月选择 {1}。
go.code.completion.for.time.package.hour=为小时执行同样的操作，从建议列表中选择 {0}。
go.code.completion.for.time.package.minute=为分钟选择 {0}，完成模板。
go.support.of.go.embed.name=基础补全: 使用 //go:embed
go.support.of.go.embed.string=使用 {0} 指令，可以在构建期间将文件和目录嵌入到 Go 二进制文件中。\n\
我们来将 {1} 文件作为 {2} 类型嵌入。按 {3}，然后从建议列表中选择 {1}。
go.support.of.go.embed.note={0}: 要使用 {1} 指令，请确保已安装 Go 1.16 或更高版本。有关 Go SDK 安装的详细信息，请参阅<a href="{2}">在文档中下载 Go SDK</a>。
go.support.of.go.embed.navigate=我们的文件还有问题。按 {0} 导航到其他问题
go.support.of.go.embed.fs=检查表明所指定的目录不存在。我们可以将它替换成现有目录。\n\
按 {0}，选择 {1}，键入 {2}，然后选择 {3}。
go.dump.goroutines.click.button.more=在 {0} 工具窗口中，点击 {1}。
go.dump.goroutines.dump.tab={0} 选项卡会显示应用程序的 Goroutine 列表。我们的应用程序有几个 goroutine。但您的实际应用程序可能不止这些。\n\
在 <ide/> 中，您可以应用筛选器来搜索特定的 goroutine，并研究筛选后的结果。
go.struct.fields.lesson.name=创建结构并填充结构字段
go.struct.fields.create.type=使用结构时，您可能希望先编写具有字段及其值的结构，然后在结构类型中定义所有内容。与示例一样，我们创建了一个新结构并为其字段定义了值。但我们仍然缺少结构定义。\n\
我们通过按 {0} 并选择 {1} {2} 快速修复来解决这个问题。
go.struct.fields.type.defined= 现在，已使用相应的字段对 {0} 结构进行了定义。
go.struct.fields.struct.no.fields=还有另一种情况，我们定义了所有内容，但需要为新结构填充字段名。我们可以手动重新输入，但 <ide/> 针对此过程有一个意图操作。
go.struct.fields.invoke.intentions=按 {0} 调用意图操作。
go.apply.fix=选择 {0} 并按 {1}。
go.navigate.to.error=按 {0} 转到下一个错误。
go.generate.getters.and.setters.name=生成 getter 和 setter
go.generate.getters.and.setters.action=在需要为结构字段生成 getter 和 setter 的情况下，可以使用意图操作。\n\
按 {0} 并选择“{1}”。在“{2}”对话框中，按 {3} 并选择所有可用字段。点击“{4}”。
go.implement.missing.methods.lesson.name=实现缺少的方法
go.introduce.function.lesson.name=从函数类型创建函数
go.introduce.function.intro=<ide/> 可以从调用创建函数和方法。现在，如果缺少函数或方法，还可以根据其类型进行创建。
go.introduce.function.invoke.intentions=注意文本光标位于 {0} 标识符下，该标识符用作函数引用。按 {1} 调用意图操作。
go.introduce.function.final.propose=您现在可以根据需要调整参数。
go.fixing.test.lesson.name=修复测试文件
go.fixing.test.open.problems.toolwindow={0} 工具窗口显示当前文件中的警告和错误列表，并描述了这些问题。\n\
测试文件已损坏，来看看有什么问题。\n\
按 {1} 打开 {0} 工具窗口。
go.fixing.test.close.problems=有一些问题需要我们注意。您可以直接在 {0} 工具窗口中解决部分问题。但是有些问题需要编辑器中的特定操作。我们将在编辑器中应用所有修复!\n\
再次按 {2} 关闭 {1} 工具窗口。
go.fixing.test.fix.string.conversion=此 {0} 转换返回 Unicode 代码点的 UTF-8 表示，而不是我们期望的十进制字符串表示。\n\
要解决这个问题，请使用 {2} 软件包的 {1} 方法。按 {3}，然后选择 {4}。
go.fixing.test.use.multicursors=下一个错误非常明显，我们在匿名 struct 中缺少右大括号和逗号。但是我们不想在每行中都重复键入。多光标可能会有所帮助。\n\
要触发多光标，选择区域并按 {0}。键入 {1} 补全该 struct。
go.fixing.test.fix.camelcase={1} 软件包的 <a href="{0}">Go 文档</a>指出，函数名称必须以骆驼拼写法书写(如 {2})。我们的 {3} 函数不符合此惯例。\n\
要修复函数名称，请按 {4}，然后选择 {5}。
go.fixing.test.negate=最后一个并不是真正的错误，而是一些重构，能够简化我们的代码。注意 {0} 函数中的求反，让我们看看能做些什么。\n\
按 {1}，将选择移至 {2} 节点，然后按 {3} 预览我们将要执行的更改。\n\
看起来不错，按 {5} 应用 {4} 建议。
go.postfix.templates.lesson.name=后缀模板(nn、panic、rr 和 return)
go.postfix.templates.nn=键入 {0}，然后从补全列表中选择 {1} 后缀模板。
go.postfix.templates.choose.item=键入 {0}，然后按 <action>EditorEnter</action>。从建议列表选择 {1}。
go.postfix.templates.rr={0} 后缀补全模板生成一段代码，用于检查错误变量是否不为 {1}。您可以使用 {0} 后缀补全模板进行错误处理。\n\
现在键入 {2}，然后按 {3} 选择后缀模板。
go.postfix.templates.return=键入 {0} 并应用 {1} 后缀模板。
go.var.check.error.postfix.template.name=varCheckError 后缀模板
go.var.check.error.postfix.template.call=来继续讨论错误处理。这次是讨论 {0} 后缀模板。如果是在返回错误的标识符之后键入它，<ide/> 会自动添加默认变量名，并且函数会返回错误。\n\
尝试在 {2} 函数后键入 {1}，然后从建议列表中选择 {0}。
go.var.check.error.postfix.template.anonymous.variable=键入 {0} 以使用空标识符，然后按 {1}。
go.var.check.error.postfix.template.quick.fix=Go 1.16 为 {0} 引入了新检查。它确保解封字节切片的值不是 {1}。<ide/> 会检测此类情况，并提供用于解决这些问题的快速修复。\n\
按 {2} 并选择 {3}。
go.handling.unhandled.errors.name=处理未处理的错误
go.handling.unhandled.errors.handle.error={0} 代码检查会通知您返回错误值的函数或方法，但不会检查这些错误值。要进行处理，可以使用以下快速修复。\n\
第一个是 {1} 快速修复。它将调用结果分配给变量并生成 {2} 检查。\n\
我们将它应用到示例中! 按 {3} 并选择 {1}。
go.handling.unhandled.errors.handle.error.var.name=为变量名键入 {0}，然后按 {1}。
go.handling.unhandled.errors.wrap.in.closure=另一种快速修复适用于 {0} 和 {1} 语句。它的运作方式与 {2} 快速修复类似，但也会将代码包装在闭包中。\n\
按 {3} 并选择 {4}。
go.improve.names.lesson.name=错误变量的更好名称
go.improve.names.intro=<ide/> 为错误({0})和上下文({1})变量推荐最受欢迎的名称变体。
go.improve.names.introduce.variable=文本光标在 {0} 调用处。按 {1} 提取变量。
go.improve.names.apply.fix=在列表中选择整个调用，然后按 {0}。注意，<ide/> 为变量建议了 {1} 名称，因为它是错误的最常用名称。
go.smart.type.completion.special.cases.lesson.name=类型断言和 switch 结构
go.smart.type.completion.special.cases.number=如果需要验证或检查变量的类型，可以使用类型断言或 switch 构造。<ide/> 将这些类型显示在建议列表的开头。要减少大量建议，可继续键入类型名称。\n\
让我们在 {0} 函数中补全验证。要完成操作，我们需要为 {2} 接口传递 {1} 类型。按 {3}，然后选择 {4} 类型。
go.smart.type.completion.special.cases.line=如果您决定将字符串传递至 {0} 函数，会导致 {1} 错误。要检查任意值的类型，可以使用类型 switch 构造。按 {2}，然后选择 {3}。
go.delete.conversion.lesson.name=冗余类型转换
go.delete.conversion.intro=<strong>冗余类型转换</strong>检查会警告可以省略的冗余类型转换(例如，当您将字符串文字转换为字符串时)。在<a href="{0}">冗余类型转换</a>中可了解有关检查的更多信息。
go.delete.conversion.invoke.intentions=注意编辑器中的 {0} 函数。文本光标位于 {2} 的 {1} 类型转换上。按 {3} 调用意图操作。
go.variadic.functions.lesson.name=可变函数(快速修复和重构)
go.variadic.functions.unpack.slice=可变函数是可以使用不同数量的参数调用的函数，例如 {0}。\n\
可变函数将可变实参作为切片处理。\n\
在我们的示例中，该可变函数为 {1}。\n\
但是，我们无法按原样将 {2} 切片传递至可变函数 {3}。对于这种情况，Go 提供了特殊语法。就是切片之后的省略号({4})。\n\
要解决该错误，按 {5}，然后选择 {6}。
go.variadic.functions.inline=您可以使用切片的可变实参替换切片。按 {0} 调用 {1} 重构。
go.variadic.functions.introduce.variable=要还原 {0} 重构，请使用 {1} 重构。按 {2}，然后从建议列表中选择 {3}。
go.basic.completion.type.and.choose=默认情况下，<ide/> 会立即补全您的代码。在文本光标的位置开始键入 {0}，您将看到带有匹配建议的“查找”菜单。您可以按 {2} 从“查找”菜单选择 {1}。
go.basic.completion.invoke.completion=请注意，<ide/> 会自动插入一个新的导入。接下来，按 {0} 激活基本补全，选择 {1}，然后按 {2}。
go.press.and.apply.fix=按 {0} 并选择 {1}。
go.apply.fix.at.once=或者，如果工具提示仍然可见，您可以按 {0} 立即应用建议的快速修复。
go.onboarding.change.ui.settings=在本课中，<ide/> 会将某些 UI 设置更改为默认状态。完成或退出课程后，将恢复您的偏好设置。
go.onboarding.indexing.description=第一次打开项目时，<ide/> 会扫描 Go SDK 和项目本身，以收集编码辅助所需的详细信息。要继续，请等待索引完成。
go.debug.function.context.menu=您可以通过不同的方式调试代码。其中的一种方式是利用上下文菜单。\n\
尝试通过右键点击代码所在编辑器中的区域调用上下文菜单。
go.autocomplete.json.name=JSON 结构标记的自动补全
go.autocomplete.json.autocomplete=开始填写 JSON 标记时，在输入反引号 ({0}) 之后，<ide/> 将建议输入一个键。键入一个反引号 {0}，然后选择 {1}。
go.autocomplete.json.select.style=现在选择要应用的样式。我们选择 {0}！IDE 将保存您的选择，并为此结构的其他字段建议相同的样式。
go.export.types.name=导出类型
go.export.types.quickfix=如果您编写一个返回未导出类型的导出函数，<ide/> 将建议一个快速修复方法来导出该类型。按 {0} 并选择 {1}。
go.implement.methods.with.todo=使用 TODO 实现方法
go.implement.methods.with.todo.introduction=当您使用 {1} 操作时，{0} 注释会自动添加到生成的模板中。这些特殊注释会在编辑器中高亮显示，编制索引并在 {2} 工具窗口中列出。它将提醒您注意未实现的方法。
go.implement.methods.with.todo.select.type=要添加缺少的类型，请按 {0} 并选择 {1}。
go.implement.methods.with.todo.select.interface=在 {0} 字段中，输入 {1}，然后按 {2}。
go.implement.methods.with.todo.enter.struct.name=输入 {0} 作为新结构的名称。
go.error.string.formatting.name=将字符串转换为数字
go.error.string.formatting.parsefloat=<ide/> 有特殊的后缀模板，可以帮助您将字符串转换为数字。通过输入点号 ({0}) 并从建议列表中选择 {1} 来尝试第一个选项。
go.error.string.formatting.parseint=我们将 {0} 后缀模板应用于 {1}。再次输入 {2}，选择 {0}，然后按 {3} 接受默认值。
go.error.string.formatting.goto=我们的程序中仍有一个弱警告。
go.error.string.formatting.introduction=根据<a href="{0}">Go 惯例</a>，您不应将错误字符串大写。如果您不小心忘记了这个惯例，<ide/> 会提醒您。\n\
要更正警告，请按 {1} 并选择 {2}。
go.to.internal.directory.name=导航、构建约束和代码格式设置
go.to.internal.directory.build.constraints=根据 <a href="{0}">Bug-resistant build constraints 提案</a>，{1} 将被 {2} 替换。从 {1} 到 {2} 语法的过渡期将从 Go 1.16 持续到 1.18。在 Go 1.16 中，您可以使用旧语法或者同时使用两种语法。\n\
按 {3} 删除所选新语法声明。
go.to.internal.directory=从 {0} 2021.2 开始，您可以导航到 {1} 文件夹中存储的接口。\n\
按 {2} 转到 {3} 接口的实现。
go.to.internal.directory.hover.over.tab=顺便说一下，要查看文件位置，您可以将鼠标指标悬停在编辑器中的选项卡上。例如，将指针悬停在“{0}”选项卡上。
go.to.internal.directory.reformat.gofmt.on.save= {0} 文件需要重新设置代码格式。按 {1} 重新设置文件格式。\n\
此外，默认情况下，<ide/> 将在内置的 <ide/> 格式化程序后运行{2}工具。此设置通过 {5} 中的“{4}”选项卡上的“{3}”选项进行配置。
go.type.parameters.module.name=泛型（类型形参）
go.type.parameters.description=可能有助于您使用泛型的功能
go.enable.generics.in.go.files.name=使用泛型
go.enable.generics.in.go.files.run.in.playground=另一种运行代码的方法是使用 {0}。\n\
要试用此功能，请按 {1}。如果出现确认对话框，请点击 {2} 将文件设为公开。将在编辑器的右下角显示包含 {0} 中页面的链接的弹出窗口。
go.enable.generics.in.go.files.click.link=现在，点击生成的链接以在浏览器中打开您的代码。\n\
请注意，要在 {0} 处运行带有类型形参的代码，您必须从“{2}”按钮附近的下拉列表中选择 {1}，然后点击“{2}”按钮。
go.goto.next.error=按 {0} 转到文件中下一个高亮显示的错误。
go.debug.nil.hide.types.name=类型和 nil 接口的表示
go.debug.nil.hide.types.introduction=Go 中的接口有两个组件，类型和该类型的值。要使接口为 {0}，这两个组件都必须为 {0}。如果您的程序中有一个接口，其值包含 {0} 指针，则该接口将不等于 {0}，因为内部类型不是 {0}。在调试过程中，<ide/> 会检测这种情况，并以不同的方式显示它们。\n\
我们从创建断点开始调试。按 {1} 切换断点。{2}
go.debug.nil.hide.types.variables=在 {0} 窗格中，您可以看到 {1} 和 {2} 接口之间的差异。{1} 接口是 {3}，因为它的值和类型都未设置。与在接口值内部存储 {4} 类型的 {3} 指针的 {2} 接口不同。无论指针的值是什么，{2} 接口的内部类型都是 {3}。
go.debug.nil.hide.types=如果对象类型占用大量空间，则可以在 {0} 工具窗口中隐藏该对象类型。\n\
试试看！右击 {1} 窗格中的变量，然后清除显示的列表中的 {2} 选项。
go.debug.stop.debug=按 {0} 停止调试并完成课程。
go.goto.next.warning=按 {0} 转到文件中高亮显示的警告。
go.debug.run.sample=选择 {0} 目录项或尝试 {1}。
go.onboarding.feedback.system.found.sdks=已找到 SDK：
go.onboarding.feedback.system.no.sdks=无
go.onboarding.feedback.system.used.sdk=已使用 SDK：
go.onboarding.option.sdk.issues=SDK 问题
go.enable.generics.set.118.in.go.mod=要尝试使用类型形参，您的 {0} 必须注明为 {1} 或更高版本。您可以打开 {0} 进行手动修复，或是使用快速修复功能。\n\
请按 {2}，然后选择 {3}。
go.enable.generics.run.class=IDE 没有显示任何错误，代码运行准备就绪，请按 {0}。
go.enable.generics.missing.go118.quickfix=您当前正在使用 Go {0}。要在本课中使用泛型，您需要安装或切换到 Go 1.18 或更高版本。\n\
您可以按 {1}，然后选择 {2} 以执行该操作。
go.enable.generics.missing.go118.download.or.local=如果您之前安装过 Go {0}，可以尝试使用下拉列表进行查找。或者，点击“{1}”按钮并选择是要下载所需的 SDK 版本（{2}），还是要导航到硬盘驱动器上的本地副本（{3}）。\n\
通过上述方式，选择比 Go {0} 更高的版本，然后在所有对话框中点击 {4} 以应用新的 SDK。
go.enable.generics.missing.go118.indexing=<ide/> 正在处理 Go SDK。请等待处理完成，然后点击继续链接。